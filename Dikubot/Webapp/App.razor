@using Dikubot.Webapp.Authentication
@using System.Threading
@using Dikubot.DataLayer.Database.Global.GuildSettings
@using global::Discord.WebSocket
@using Dikubot.Webapp.Pages
@using Microsoft.IdentityModel.Tokens
@using System.Reflection
@using Dikubot.DataLayer.Database.Global.User
@using Dikubot.Discord
@using Microsoft.Graph
@using Dikubot.Webapp.Shared.Layouts.Layout;
@using MudBlazor.ThemeManager
@inject NotifyStateService _notifyStateService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService _user;

<MudThemeProvider  IsDarkMode="@IsDarkMode" Theme="ThemeManager.Theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<LoadingScreen>
    <CascadingAuthenticationState>
        <CascadingValue Value="@this">
        <CascadingValue Value="@ThemeManager">
            <CascadingValue Value="@Guild">
                <Router AppAssembly="@typeof(Startup).Assembly" PreferExactMatches="@true">
                    <Found Context="routeData">
                        <AuthorizeView>
                            <Authorizing><Loading/></Authorizing>
                            <Authorized>
                                @if (Guild == null)
                                {
                                    <LayoutView Layout="@typeof(ChangeGuildLayout)">
                                        <GuildWidgetCollection/>
                                    </LayoutView>
                                }else
                                {
                                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
                                }
                            </Authorized>
                            <NotAuthorized>
                                @if (routeData.PageType.FullName.StartsWith("Dikubot.Webapp.Pages.Index"))
                                {
                                    <LayoutView Layout="@typeof(FooterLayoutNoWidth)">
                                            <HomePageNotLogin/>
                                        </LayoutView>
                                }
                                else if (@routeData.PageType.FullName.StartsWith("Dikubot.Webapp.Pages.Public") ||
                                         !routeData.PageType.GetCustomAttributes(typeof(AllowAnonymousAttribute)).IsNullOrEmpty())
                                {
                                    <RouteView RouteData="@routeData" DefaultLayout="typeof(FooterLayout)"></RouteView>
                                }
                                else
                                {
                                    <LayoutView Layout="@typeof(FooterLayout)">
                                        <Login></Login>
                                    </LayoutView>
                                }
                            </NotAuthorized>
                        </AuthorizeView>
                    </Found>
                    <NotFound>
                        <AuthorizeView>
                            <Authorized>
                                <LayoutView Layout="@typeof(MainLayout)">
                                    <PageNotFound></PageNotFound>
                                </LayoutView>
                            </Authorized>
                            <NotAuthorized>
                                <LayoutView Layout="@typeof(FooterLayout)">
                                    <PageNotFound></PageNotFound>
                                </LayoutView>
                            </NotAuthorized>
                        </AuthorizeView>
                    </NotFound>
                </Router>
            </CascadingValue>
        </CascadingValue>
        </CascadingValue>
        </CascadingAuthenticationState>
    
    
</LoadingScreen>

@code {
    
    public bool IsDarkMode;
    private GuildSettingsModel Guild;
    

    protected override void OnInitialized()
    {
        IsDarkMode = _user?.GetUserGlobalModel()?.DarkTheme ?? false;
        base.OnInitialized();
    }

    public void ChangeTheme(ThemeManagerTheme value)
    {
        ThemeManager = value;
        StateHasChanged();
    }

    public void DarkMode()
    {
        IsDarkMode = !IsDarkMode;
        //ToDo: Update Users
        
        StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (_user?.GetUserGlobalModel()?.SelectedGuild is null or 0 
            || !DiscordBot.ClientStatic.Guilds.Any(guild => guild.Id == _user.GetUserGlobalModel().SelectedGuild))
        {
            Guild = null;
        }
        else
        {
            Guild = new GuildSettingsModel(_user?.GetUserGlobalModel()?.GetSelectedGuild());
            
        }
        
        _notifyStateService.UserChange += UserChange;
    }

    public void UserHasChange()
    {
        if (_user?.GetUserGlobalModel()?.SelectedGuild is null or 0 
            || !DiscordBot.ClientStatic.Guilds.Any(guild => guild.Id == _user.GetUserGlobalModel().SelectedGuild))
        {
            Guild = null;
        }
        else
        {
            Guild = new GuildSettingsModel(_user?.GetUserGlobalModel()?.GetSelectedGuild());
            
        }
        
        StateHasChanged();
    }
    
    
    private void UserChange(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad:true);
    }
    

    /*
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        _isDarkMode = await _themeProvider.GetSystemPreference();
        StateHasChanged();
    }*/
    
    public ThemeManagerTheme ThemeManager = new()
    {
        
        Theme = new MudTheme()
        {
            Typography = new Typography()
            {
                
            },
            Palette = new Palette()
            {
            
                Background = "#f5f5f5",
                Surface = "#FFFFFF",

                Primary = "#AE3030",
                PrimaryLighten = "#FFDAD5",
                PrimaryDarken = "#410003",
                PrimaryContrastText = "#FFFFFF",
                Secondary = "#775653",
                SecondaryLighten = "#FFDAD7",
                SecondaryDarken = "#2C1513",
                SecondaryContrastText = "#FFFFFF",
                Tertiary = "#725B2E",
                TertiaryLighten = "#FFDEA6",
                TertiaryDarken = "#271900",
                TertiaryContrastText = "#FFFFFF",
                Error = "#BA1B1B",
                ErrorLighten = "#FFDAD4",
                ErrorDarken = "#410001",
                ErrorContrastText = "#FFFFFF",
                
                AppbarText = "#FFFFFF",
            },
            
            PaletteDark = new Palette()
            {
                Background = "#1a1a27",
                Surface = "#32333d",
                
                TextPrimary = "#FFFFFF",
                TextSecondary = "#9f9f9f",
                TextDisabled = "#767676",

                DrawerBackground = "#1a1a27",
                DrawerText = "#FFFFFF",
                DrawerIcon = "rgb(87,87,87)",
                
            }
        }
    };

}