@page "/roles"
@using Dikubot.Webapp.Authentication
@using global::Discord.WebSocket
@using Dikubot.DataLayer.Database.Global.GuildSettings
@using Dikubot.DataLayer.Database.Global.User
@using Dikubot.DataLayer.Database.Guild
@using Dikubot.DataLayer.Database.Guild.Models.JoinRole
@using Dikubot.DataLayer.Database.Guild.Models.User
@using Dikubot.DataLayer.Database.Guild.Models.User.SubModels
@using Dikubot.DataLayer.Permissions
@using Dikubot.Discord
@using Microsoft.IdentityModel.Tokens
@using Dikubot.Roles
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject GuildSettingsMongoService GuildSettingsMongoService
@inject IGuildMongoFactory GuildMongoFactory
@inject IPermissionServiceFactory PermissionServiceFactory

@if (_loaded)
    {
        <MudAlert Severity="Severity.Normal" Square="true" Class="my-2">Du er ved at vælge roller i fællesskabet @_guildSettingsModel.Name. 
            Du vil modtage rollerne på fællesskabets Discord med det samme.</MudAlert>
        <MudGrid>
            @foreach (JoinRoleCategoryMainModel category in _categories)
            {
                @if (!HasPermissionForCategory(category))
                {
                    continue;
                }
                <MudItem xs="12" sm="6" md="4">
                    <RolesWidget category="@category"
                                 _permissionsService="@_permissionsService"
                                 _userGuildModel="@_userGuildModel"
                                 UserGuildMongoService="@_userGuildMongoService"></RolesWidget>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <Loading></Loading>
    }

@code {
    private Authenticator _authenticator;
    private UserIdentity _user;
    private SocketGuild _guild;
    private JoinRoleMongoService _joinRoleMongoService;
    private UserGlobalModel _userGlobalModel;
    private List<JoinRoleCategoryMainModel> _categories;
    private GuildSettingsModel _guildSettingsModel;
    private UserGuildMongoService _userGuildMongoService;
    private UserGuildModel _userGuildModel;
    private PermissionsService _permissionsService;
    private bool _loaded = false;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _authenticator = ((Authenticator) AuthenticationStateProvider);
        var authState = await _authenticator.GetAuthenticationStateAsync();
        _user = (UserIdentity) authState.User.Identity;
        if (_user == null)
        {
            return;
        }
        _userGlobalModel = _user.UserGlobalModel;
        _guild = DiscordBot.ClientStatic.GetGuild(_userGlobalModel.SelectedGuild);
        _joinRoleMongoService = GuildMongoFactory.Get<JoinRoleMongoService>(_guild);
        _guildSettingsModel = GuildSettingsMongoService.Get(_guild) ?? new GuildSettingsModel(_guild);
        _userGuildMongoService = GuildMongoFactory.Get<UserGuildMongoService>(_guild);
        _userGuildModel = _userGuildMongoService.Get(_userGlobalModel.DiscordId);
        _permissionsService = PermissionServiceFactory.Get(_guild);
        _categories = _joinRoleMongoService.GetAll();

        _loaded = true;
        StateHasChanged();
    }

    protected void JoinAll(JoinRoleCategoryMainModel joinRoleCategoryMainModel)
    {
        if (!HasPermissionForCategory(joinRoleCategoryMainModel))
        {
            return;
        }
        foreach (var joinRoleMainModel in joinRoleCategoryMainModel.TextRoles.Where(HasPermissionForRole))
        {
            _userGuildModel.AddRole(new UserRoleModel(joinRoleMainModel.RoleId));
        }
        _userGuildMongoService.Update(_userGuildModel);
        _permissionsService.SetDiscordUserRoles(_userGuildModel).ConfigureAwait(false);
        this.StateHasChanged();
    }
    
    
    

    protected bool HasPermissionForCategory(JoinRoleCategoryMainModel joinRoleCategoryMainModel)
    {
        return joinRoleCategoryMainModel.Permission.IsNullOrEmpty() || joinRoleCategoryMainModel.Permission.Any(guid => _userGuildModel.HasRole(guid));
    }
    
    protected bool HasPermissionForRole(JoinRoleMainModel joinRoleMainModel)
    {
        return joinRoleMainModel.Permission.IsNullOrEmpty() || joinRoleMainModel.Permission.Any(guid => _userGuildModel.HasRole(guid));
    }
}