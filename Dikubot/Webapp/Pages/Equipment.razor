@page "/equipment"
@using Dikubot.Webapp.Authentication
@using global::Discord.WebSocket
@using Dikubot.DataLayer.Database.Global.GuildSettings
@using Dikubot.DataLayer.Database.Global.User
@using Dikubot.DataLayer.Database.Guild.Models.Calendar
@using Dikubot.DataLayer.Database.Guild.Models.Calendar.Equipment
@using Dikubot.DataLayer.Database.Guild.Models.JoinRole
@using Dikubot.DataLayer.Database.Guild.Models.User
@using Dikubot.DataLayer.Database.Guild.Models.User.SubModels
@using Dikubot.DataLayer.Permissions
@using Dikubot.Discord
@using Microsoft.IdentityModel.Tokens
@inject AuthenticationStateProvider AuthenticationStateProvider

@using Syncfusion.Blazor.Schedule

<h3>Equipment</h3>
  @if (_loaded)
    {
<div class="control-section">
    <SfSchedule TValue="EventData" Width="100%" Height="650px" @bind-SelectedDate="@CurrentDate">
        <ScheduleTemplates>
            <ResourceHeaderTemplate>
                <div class='template-wrap'>
                    <div class="employee-name"><b>@(((context as TemplateContext).ResourceData as ResourceData).Name)</b></div>
                    <div class="employee-designation">@(((context as TemplateContext).ResourceData as ResourceData).Designation)</div>
                </div>
            </ResourceHeaderTemplate>
        </ScheduleTemplates>
        <ScheduleGroup EnableCompactView="false" Resources="@groupData"></ScheduleGroup>
        <ScheduleResources>
            <ScheduleResource TItem="ResourceData" TValue="int[]" DataSource="@ResourceDatasource" Field="ResourceId" Title="Resource" Name="Resources" TextField="Text" IdField="Id" ColorField="Color" AllowMultiple="true"></ScheduleResource>
        </ScheduleResources>
        <ScheduleEventSettings DataSource="@appointmentData"></ScheduleEventSettings>
        <ScheduleViews>
            <ScheduleView MaxEventsPerRow="1" Option="View.TimelineMonth" AllowVirtualScrolling="true"></ScheduleView>
        </ScheduleViews>
    </SfSchedule>
</div>
    }else
    {
        <Loading></Loading>
}

@code{
    private int CurrentYear;
    public List<ResourceData> ResourceDatasource = new List<ResourceData>();
    public List<EventData> appointmentData = new List<EventData>();
    private string[] groupData = { "Resources" };
    private DateTime CurrentDate { get; set; }
    
    private Authenticator authenticator;
    private UserIdentity user;
    private SocketGuild guild;
    private JoinRoleServices _joinRoleServices;
    private UserGlobalModel _userGlobalModel;
    private UserGuildServices _userGuildServices;
    private bool _loaded = false;
    
    private CalendarServices _calendarServices;
    private EquipmentServices _equipmentServices;
    
    
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        authenticator = ((Authenticator) AuthenticationStateProvider);
        var authState = await authenticator.GetAuthenticationStateAsync();
        user = (UserIdentity) authState.User.Identity;
        if (user == null)
        {
            return;
        }
        _userGlobalModel = user.UserGlobalModel;
        guild = DiscordBot.Client.GetGuild(_userGlobalModel.SelectedGuild);
        _joinRoleServices = new JoinRoleServices(guild);
        _userGuildServices = new UserGuildServices(guild);
        _calendarServices = new CalendarServices(guild);
        _equipmentServices = new EquipmentServices(guild);

        CurrentYear = DateTime.Today.Year;
        CurrentDate = DateTime.Now;
        appointmentData = GenerateEvents();
        ResourceDatasource = GenerateResourceData();
        
        _loaded = true;

    }
    
    
    public List<ResourceData> GenerateResourceData()
    {
        List<ResourceData> resources = new List<ResourceData>();

        var Equipment = 
            _calendarServices.Get(model => model.CalendarType == CalendarModel.EnumCalendarType.Equipment,10,0);
        
        foreach (CalendarModel model in Equipment)
        {
            resources.Add(new ResourceData
            {
                Id = model.Id.GetHashCode(),
                Text = "Resource: " + model.Name,
                Color = model.Color.ToString(),
                Name = model.Name,
                Designation = model.Decs
            });
        }
        
        return resources;
    }
    public List<EventData> GenerateEvents()
    {
        DateTime date = new DateTime(CurrentYear, 1, 1);
        List<EventData> data = new List<EventData>(3600);
        
        var Equipment = 
            _calendarServices.Get(model => model.CalendarType == CalendarModel.EnumCalendarType.Equipment,10,0);

        var Events = _equipmentServices.Get();
        
        foreach (var model in Events)
        {
            data.Add(new EventData
            {
                Id = model.Id.GetHashCode(),
                Subject = "Event #" + model.Id.ToString(),
                StartTime = model.Start,
                EndTime = model.End,
                IsAllDay = false,
                ResourceId = model.EquiqmentId.GetHashCode()
            });
        }
        
        return data;
    }
    public class EventData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public string Location { get; set; }
        public string Description { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public Nullable<bool> IsAllDay { get; set; }
        public string CategoryColor { get; set; }
        public string RecurrenceRule { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
        public string RecurrenceException { get; set; }
        public string StartTimezone { get; set; }
        public string EndTimezone { get; set; }
        public int ResourceId { get; set; }
    }
    public class ResourceData
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public string Name { get; set; }
        public string Designation { get; set; }
        public string Color { get; set; }
    }
}