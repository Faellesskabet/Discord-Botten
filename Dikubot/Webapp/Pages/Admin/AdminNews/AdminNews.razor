@page "/admin/news"
@using Dikubot.DataLayer.Database.Guild
@using Dikubot.DataLayer.Database.Guild.Models.Channel.TextChannel
@using Dikubot.DataLayer.Static
@using Dikubot.Discord
@using Dikubot.Webapp.Authentication
@using Dikubot.Webapp.Authentication.Identities
@using global::Discord.WebSocket
@using Dikubot.Webapp.Shared.Dialog
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IGuildMongoFactory IGuildMongoFactory
@attribute [Authorize(Roles = Permissions.GuildAdmin)]
<h3>Nyhed indstillinger</h3>
@if (_loaded)
{
    <MudContainer>
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h5">Hvilken kanaler skal vises under nyheder?</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudSelect Label="Nyhed kanaler" Lines="2" MultiSelection="true" HelperText="Vælg alle de kanaler der skal bruges til nyheder" @bind-SelectedValues="_selectedChannels"
                           MultiSelectionTextFunc="list => GetText(_selectedChannels)" Text="@GetText(_selectedChannels)">
                    @foreach (TextChannelMainModel textChannel in _textChannelMainModels)
                    {
                        <MudSelectItem Value="@textChannel">@textChannel.Name</MudSelectItem>
                    }
                </MudSelect>

            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveNews">Gem ændringer</MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="DiscardNews">Gem ikke ændringer</MudButton>
            </MudCardActions>
        </MudCard>
    </MudContainer>
}
else
{
    <Loading></Loading>
}

@code {

    [Inject]
    private IDialogService DialogService { get; set; }

    private Authenticator authenticator;
    private DiscordIdentity _discord;
    private SocketGuild _guild;
    private TextChannelMongoService _textChannelMongoService;
    private List<TextChannelMainModel> _textChannelMainModels;

    private IEnumerable<TextChannelMainModel> _selectedChannels { get; set; }

    public string GetText(IEnumerable<TextChannelMainModel> channels)
    {
        return Util.ConcatListToString(channels.Select(model => model?.Name ?? "").ToList());
    }

    private bool _loaded;

    protected override async Task OnInitializedAsync()
    {
        authenticator = (Authenticator)AuthenticationStateProvider;
        AuthenticationState authState = await authenticator.GetAuthenticationStateAsync();
        _discord = (DiscordIdentity)authState.User.Identity;
        if (_discord == null)
        {
            return;
        }

        _guild = DiscordBot.ClientStatic.GetGuild(_discord.DiscordUserGlobalModel.SelectedGuild);
        _textChannelMongoService = IGuildMongoFactory.Get<TextChannelMongoService>(_guild);
        _textChannelMainModels = _textChannelMongoService.GetAll();
        _selectedChannels = _textChannelMainModels.Where(model => model.IsNewsChannel.GetValueOrDefault());

        _loaded = true;
    }

    private async void SaveNews()
    {
        DialogParameters parameters = new DialogParameters();
        parameters.Add("ContentText", "Er du sikker på du vil gemme dine ændringer?");
        parameters.Add("ButtonText", "Gem Ændringer");
        parameters.Add("Color", Color.Success);
        DialogResult result = await DialogService.Show<ConfirmDialog>("Gem Ændringer", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }

        HashSet<TextChannelMainModel> hashedSelection = new(_selectedChannels);
        foreach (TextChannelMainModel textChannelMainModel in _textChannelMainModels)
        {
            textChannelMainModel.IsNewsChannel = false;
            if (_selectedChannels.Contains(textChannelMainModel))
            {
                textChannelMainModel.IsNewsChannel = true;
            }
            _textChannelMongoService.Upsert(textChannelMainModel);
        }
        StateHasChanged();
    }

    private async void DiscardNews()
    {
        DialogParameters parameters = new DialogParameters();
        parameters.Add("ContentText", "Er du sikker på du vil slette dine ændringer?");
        parameters.Add("ButtonText", "Slet Ændringer");
        parameters.Add("Color", Color.Warning);
        DialogResult result = await DialogService.Show<ConfirmDialog>("Slet Ændringer", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }

        _selectedChannels = _textChannelMainModels.Where(model => model.IsNewsChannel.GetValueOrDefault());
        StateHasChanged();
    }

}