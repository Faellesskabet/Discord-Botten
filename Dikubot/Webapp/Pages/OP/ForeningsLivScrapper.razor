@page "/op/union/webScrapper/"
@using System;
@using System.IO
@using System.Collections
@using System.Net
@using System.Net.Http;
@using Dikubot.Webapp.Extensions.Discovery.Links
@using Dikubot.Extensions.search
@using Microsoft.Graph
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components
@using Dikubot.Webapp.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UnionMongoService UnionMongoService
@using Dikubot.DataLayer.Database.Global.Union
@attribute [Authorize(Roles = Permissions.GlobalAdmin)]

<h3>WebScrapper</h3>

<MudButton OnClick="SaveAll" Variant="Variant.Filled" Color="Color.Success"> SCAP ALL </MudButton>

<MudButton OnClick="Scrapper" Variant="Variant.Filled" Color="Color.Default"> START SCARPING :D</MudButton>

<Searchbar Items="_unionModels" Context="UnionModel" NumberOfItems="12">
    <TemplateRow Context="unionModel" >
        <MudItem xs="12" sm="6" md="4" lg="3" >
            <UnionWidget Union="unionModel"></UnionWidget>
            <MudButton OnClick="() => removeItem(unionModel)" Variant="Variant.Outlined" Color="Color.Error"> REMOVE </MudButton>
            <MudButton OnClick="() => UnionMongoService.Upsert(unionModel)" Variant="Variant.Outlined" Color="Color.Success"> ADD </MudButton>
        </MudItem>
    </TemplateRow>
    </Searchbar>



@code {

    
    
 public string FORENINGSLIVKU(int n){
        return "https://www.foreningsliv-ku.dk/wp-json/buddypress/v1/groups?per_page=100&page="+n;
}


    
    

    private void removeItem(UnionModel model)
    {
        _unionModels = _unionModels.Where(unionModel => unionModel.Title != model.Title ).ToList();
    }
    
    List<UnionModel> _unionModels = new List<UnionModel>();

    private void SaveAll()
    {
        foreach (var sModel in _unionModels)
        {
            if (!UnionMongoService.Exists(model => model.Title == sModel.Title))
            {
                _unionModels.Add(sModel);
            }
        }
        
        
    }
    

    private async Task Scrapper()
    {
        
        _unionModels = new List<UnionModel>();
        try
        {
            List<GroupsForeningsLivKU> myDeserializedClass = new List<GroupsForeningsLivKU>();

            int n = 1;
            while (true)
            {
                HttpClient client = new HttpClient();
                string content = client.GetStringAsync(FORENINGSLIVKU(n)).Result;
                n++;
                List<GroupsForeningsLivKU> elemensts = JsonConvert.DeserializeObject<List<GroupsForeningsLivKU>>(content);
                
                foreach (var group in elemensts)
                {
                    if (!myDeserializedClass.Contains(group))
                    {
                        if (!UnionMongoService.Exists(model => model.Title == group.name))
                        {
                            myDeserializedClass.AddRange(elemensts);
                        }
                    }
                }
                if (elemensts.Count < 100)
                {
                 break;   
                }
            }
            
            string res = "";
                    
            foreach (var group in myDeserializedClass)
            {
                Task.Run(() =>
                {
    //string response = client.GetStringAsync(VARIABLE.link).Result;
                if (!UnionMongoService.Exists(model => model.Title == group.name))
                {
                    String facebook = "";
                    String hjemmeside = "";
                    String Mail = "";
                    try
                    {
                        HttpClientHandler clientHandler = new HttpClientHandler
                        {
                            AllowAutoRedirect = true,
                            MaxAutomaticRedirections = 5,
                        };
                        
                        HttpClient httpClient = new HttpClient(clientHandler);
                        
                       
                        Uri url = new Uri(group.link, new UriCreationOptions{DangerousDisablePathAndQueryCanonicalization = true});
                        
                        
                        HttpResponseMessage response = httpClient.GetAsync(url).Result;
                        
                        
                        if(!response.IsSuccessStatusCode)
                        {
                            Console.WriteLine(response.StatusCode + ": "+ url);
                            Console.WriteLine(response.Headers);
                            if (response.StatusCode == HttpStatusCode.Unauthorized)
                            {
                            }
                        }
                        else
                        {
                            //https://html-agility-pack.net/ - når vi skal opdaterer til noget smartere
                            string itemContent = httpClient.GetStringAsync(url).Result;

                            string key = "";
                            int pFrom = 0;
                            int pTo = 0;
                            if (!itemContent.Contains("<td class=\"label\" title=\"Link til Facebook\">Facebook</td><td class=\"data\"><i>Ikke angivet</i></td>"))
                            {
                                key = "\">Facebook</td><td class=\"data\"><a target=\"_new\" href=\"";
                                pFrom = itemContent.IndexOf(key) + key.Length;
                                pTo = itemContent.IndexOf("\">", pFrom);

                                facebook = itemContent.Substring(pFrom, pTo - pFrom);
                            }

                            if (!itemContent.Contains("<td class=\"label\" title=\"Link til hjemmeside\">Web</td><td class=\"data\"><i>Ikke angivet"))
                            {
                                key = "Web</td><td class=\"data\"><a target=\"_new\" href=\"";
                                pFrom = itemContent.IndexOf(key) + key.Length;
                                pTo = itemContent.IndexOf("\">", pFrom);

                                hjemmeside = itemContent.Substring(pFrom, pTo - pFrom);
                            }

                            if (!itemContent.Contains("E-mail</td><td class=\"data\"><i>Ikke angivet</i>"))
                            {
                                key = "<td class=\"label\" title=\"\">E-mail</td><td class=\"data\"><a target=\"_new\" href=\"mailto:";
                                pFrom = itemContent.IndexOf(key) + key.Length;
                                pTo = itemContent.IndexOf("\" target=\"_new", pFrom);
                                Mail = itemContent.Substring(pFrom, pTo - pFrom);
                            }

                        }
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e);
                        
                    }
                    string hashCode = String.Format("{0:X}", group.id.GetHashCode());
                    string localFileName = "thumps/"+hashCode+".jpg";
                    try
                    {
                        WebClient webClient = new WebClient();
                        
                        webClient.DownloadFile(group.avatar_urls.full, "Webapp/wwwroot/"+localFileName);

                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e);
                        
                    }
                    
                    UnionModel unionModel = new UnionModel()
                    {
                        Title = group.name,
                        Decs = group.description.raw,
                        LogoUrl = localFileName,
                        Facebook = facebook,
                        Href = hjemmeside,
                        Mail = Mail,
                    };
                    if (!UnionMongoService.Exists(model => model.Title == unionModel.Title))
                    {
                        _unionModels.Add(unionModel);
                        StateHasChanged();
                    }
                    
                }
  
                });
            }
        }
        catch (Exception e)
        {
    //ignored
        }
    }

    
    
    public class AvatarUrls
    {
        public string full { get; set; }
        public string thumb { get; set; }
    }

    public class Collection
    {
        public string href { get; set; }
    }

    public class Description
    {
        public string raw { get; set; }
        public string rendered { get; set; }
    }

    public class Links
    {
        public List<Self> self { get; set; }
        public List<Collection> collection { get; set; }
        public List<User> user { get; set; }
    }

    public class GroupsForeningsLivKU
    {
        public int id { get; set; }
        public int creator_id { get; set; }
        public int parent_id { get; set; }
        public DateTime date_created { get; set; }
        public DateTime date_created_gmt { get; set; }
        public string created_since { get; set; }
        public Description description { get; set; }
        public bool enable_forum { get; set; }
        public string link { get; set; }
        public string name { get; set; }
        public string slug { get; set; }
        public string status { get; set; }
        public List<string> types { get; set; }
        public object total_member_count { get; set; }
        public object last_activity { get; set; }
        public object last_activity_diff { get; set; }
        public AvatarUrls avatar_urls { get; set; }
        public Links _links { get; set; }
    }

    public class Self
    {
        public string href { get; set; }
    }

    public class User
    {
        public bool embeddable { get; set; }
        public string href { get; set; }
    }
}