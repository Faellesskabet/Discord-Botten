@page "/emojis"
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations

@using Newtonsoft.Json
@using System.IO
@using ChangeEventArgs = Microsoft.AspNetCore.Components.ChangeEventArgs
@namespace Dikubot.Extensions.EmojiSelector


<input name="Emoji" @bind="@Value" hidden @oninput="OnValueChanged" />

<button class="e-btn e-tbar-btn" @onclick="ClickHandler">
    <div class="e-tbar-btn-text" style="font-weight: 500;">@Value</div>
</button>

<SfDialog @bind-Visible="@dialogVisible" ZIndex="1000" ShowCloseIcon="false" IsModal="true" Width="45%" Target="#rteSection">
    <DialogTemplates>
        <Header> Insert Emoticons </Header>
        <Content>
            <SfTab ID="emotIcons">
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="🙂"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div id="rteEmoticons-smiley">
                                @for (int i = 0; i < this.smileyList.Count; i++)
                                {
                                    int index = i;
                                    if (currentIndex == i)
                                    {
                                        <div class="char_block @activeClass" title="@this.smileyList.Values.ToList()[index]" @onclick="@(e => OnIconIconClick(index , 0))">
                                            @((MarkupString)this.smileyList.Keys.ToList()[index])
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="char_block" title="@this.smileyList.Values.ToList()[index]" @onclick="@(e => OnIconIconClick(index, 0))">
                                            @((MarkupString)this.smileyList.Keys.ToList()[index])
                                        </div>
                                    }
                                }
                            </div>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="🐵"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div id="rteEmoticons-animal">
                                @for (int i = 0; i < this.animalsList.Count; i++)
                                {
                                    int index = i;
                                    if (currentIndex == i)
                                    {
                                        <div class="char_block @activeClass" title="@this.animalsList.Values.ToList()[index]" @onclick="@(e => OnIconIconClick(index, 1))">
                                            @((MarkupString)this.animalsList.Keys.ToList()[index])
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="char_block" title="@this.animalsList.Values.ToList()[index]" @onclick="@(e => OnIconIconClick(index , 1))">
                                            @((MarkupString)this.animalsList.Keys.ToList()[index])
                                        </div>
                                    }
                                }
                            </div>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="🛠️"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div id="rteEmoticons-animal">
                                @for (int i = 0; i < this.objectsList.Count; i++)
                                {
                                    int index = i;
                                    if (currentIndex == i)
                                    {
                                        <div class="char_block @activeClass" title="@this.objectsList.Values.ToList()[index]" @onclick="@(e => OnIconIconClick(index, 2))">
                                            @((MarkupString)this.objectsList.Keys.ToList()[index])
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="char_block" title="@this.objectsList.Values.ToList()[index]" @onclick="@(e => OnIconIconClick(index , 2))">
                                            @((MarkupString)this.objectsList.Keys.ToList()[index])
                                        </div>
                                    }
                                }
                            </div>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="🔤"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div id="rteEmoticons-animal">
                                @for (int i = 0; i < this.symbolsList.Count; i++)
                                {
                                    int index = i;
                                    if (currentIndex == i)
                                    {
                                        <div class="char_block @activeClass" title="@this.symbolsList.Values.ToList()[index]" @onclick="@(e => OnIconIconClick(index, 3))">
                                            @((MarkupString)this.symbolsList.Keys.ToList()[index])
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="char_block" title="@this.symbolsList.Values.ToList()[index]" @onclick="@(e => OnIconIconClick(index , 3))">
                                            @((MarkupString)this.symbolsList.Keys.ToList()[index])
                                        </div>
                                    }
                                }
                            </div>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="🌍"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div id="rteEmoticons-animal">
                                @for (int i = 0; i < this.travelPlacesList.Count; i++)
                                {
                                    int index = i;
                                    if (currentIndex == i)
                                    {
                                        <div class="char_block @activeClass" title="@this.travelPlacesList.Values.ToList()[index]" @onclick="@(e => OnIconIconClick(index, 4))">
                                            @((MarkupString)this.travelPlacesList.Keys.ToList()[index])
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="char_block" title="@this.travelPlacesList.Values.ToList()[index]" @onclick="@(e => OnIconIconClick(index , 4))">
                                            @((MarkupString)this.travelPlacesList.Keys.ToList()[index])
                                        </div>
                                    }
                                }
                            </div>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="🏳️‍🌈"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div id="rteEmoticons-animal">
                                @for (int i = 0; i < this.flagsList.Count; i++)
                                {
                                    int index = i;
                                    if (currentIndex == i)
                                    {
                                        <div class="char_block @activeClass" title="@this.flagsList.Values.ToList()[index]" @onclick="@(e => OnIconIconClick(index, 5))">
                                            @((MarkupString)this.flagsList.Keys.ToList()[index])
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="char_block" title="@this.flagsList.Values.ToList()[index]" @onclick="@(e => OnIconIconClick(index , 5))">
                                            @((MarkupString)this.flagsList.Keys.ToList()[index])
                                        </div>
                                    }
                                }
                            </div>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="⚾"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div id="rteEmoticons-animal">
                                @for (int i = 0; i < this.activitiesList.Count; i++)
                                {
                                    int index = i;
                                    if (currentIndex == i)
                                    {
                                        <div class="char_block @activeClass" title="@this.activitiesList.Values.ToList()[index]" @onclick="@(e => OnIconIconClick(index, 6))">
                                            @((MarkupString)this.activitiesList.Keys.ToList()[index])
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="char_block" title="@this.activitiesList.Values.ToList()[index]" @onclick="@(e => OnIconIconClick(index , 6))">
                                            @((MarkupString)this.activitiesList.Keys.ToList()[index])
                                        </div>
                                    }
                                }
                            </div>
                        </ContentTemplate>
                    </TabItem>
                </TabItems>
            </SfTab>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Insert" IsPrimary="true" OnClick="OnInsert" Disabled="@disableInsertBtn" />
        <DialogButton Content="Cancel" OnClick="DialogOverlay" />
    </DialogButtons>
    <DialogEvents OnOverlayModalClick="DialogOverlay" />
</SfDialog>

@code {
    string rteObj;

    
    [Parameter]
    public string Value { get; set; } = "🙂";

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    
    private async Task OnValueChanged(ChangeEventArgs e)
    {
        Value = e.Value.ToString();

        await ValueChanged.InvokeAsync(Value);
    }
    
    int currentIndex { get; set; } = -1;
    int currentTabIndex { get; set; }
    string activeClass = "e-active";
    private bool dialogVisible { get; set; }
    private bool disableInsertBtn { get; set; } = true;

    Dictionary<string, string> smileyList;
    Dictionary<string, string> animalsList;
    Dictionary<string, string> objectsList;
    Dictionary<string, string> symbolsList;
    Dictionary<string, string> travelPlacesList;
    Dictionary<string, string> flagsList;
    Dictionary<string, string> activitiesList;


    Emojis myDeserializedClass;
    
    protected override async Task OnInitializedAsync()
    {
        string EmojisString = File.ReadAllText("Webapp/wwwroot/misc/full-emoji-list.json");
            //;Dikubot/Webapp/wwwroot/misc/full-emoji-list.json
        myDeserializedClass = JsonConvert.DeserializeObject<Emojis>(EmojisString);
        smileyList = myDeserializedClass.SmileysPeople.ToDictionary(model => model.emoji, model => model.description);
        animalsList = myDeserializedClass.AnimalsNature.ToDictionary(model => model.emoji, model => model.description);
        objectsList =myDeserializedClass.Objects.ToDictionary(model => model.emoji, model => model.description);
        flagsList = myDeserializedClass.Flags.ToDictionary(model => model.emoji, model => model.description);
        symbolsList = myDeserializedClass.Symbols.ToDictionary(model => model.emoji, model => model.description);
        activitiesList = myDeserializedClass.Activities.ToDictionary(model => model.emoji, model => model.description);
        travelPlacesList = myDeserializedClass.TravelPlaces.ToDictionary(model => model.emoji, model => model.description);

        
    }
    
    


    
    private void OnIconIconClick(int index, int tabIndex)
    {
        this.disableInsertBtn = false;
        this.currentIndex = index;
        this.currentTabIndex = tabIndex;
    }
    private async Task ClickHandler()
    {
        this.dialogVisible = true;
    /* await this.rteObj.SaveSelectionAsync(); */
    }
    private async Task OnInsert()
    {
        if (this.currentIndex > -1)
        {
            switch (this.currentTabIndex)
    {
        case 0:
            Value = this.smileyList.Keys.ToList()[this.currentIndex];
            break;
        case 1:
            Value = this.animalsList.Keys.ToList()[this.currentIndex];
            break;
        case 2:
            Value = this.objectsList.Keys.ToList()[this.currentIndex];
            break;
        case 3:
            Value = this.symbolsList.Keys.ToList()[this.currentIndex];
            break;
        case 4:
            Value = this.travelPlacesList.Keys.ToList()[this.currentIndex];
            break;
        case 5:
            Value = this.flagsList.Keys.ToList()[this.currentIndex];
            break;
        case 6:
            Value = this.activitiesList.Keys.ToList()[this.currentIndex];
            break;
        default:
            break;
    }
            await ValueChanged.InvokeAsync(Value);
            this.dialogVisible = false;
            this.currentIndex = -1;
        }
        
        this.disableInsertBtn = true;
    }
    private void DialogOverlay()
    {
        this.dialogVisible = false;
        this.currentIndex = -1;
    }
    
    
    public class Emoji
    {
        public int no { get; set; }
        public string code { get; set; }
        public string emoji { get; set; }
        public string description { get; set; }
        public bool flagged { get; set; }
        public List<object> keywords { get; set; }
    }
    

    public class Emojis
    {
        [JsonProperty("Smileys & People")]
        public List<Emoji> SmileysPeople { get; set; }

        [JsonProperty("Animals & Nature")]
        public List<Emoji> AnimalsNature { get; set; }

        [JsonProperty("Travel & Places")]
        public List<Emoji> TravelPlaces { get; set; }
        public List<Emoji> Activities { get; set; }
        public List<Emoji> Objects { get; set; }
        public List<Emoji> Symbols { get; set; }
        public List<Emoji> Flags { get; set; }
    }

    


    
}

<style>
    #emot_tbar,
    #emot_tbar div {
        cursor: pointer;
    }
    #rteEmoticons-smiley, #rteEmoticons-animal {
        padding: 15px 0 15px 15px;
    }
    .char_block.e-active {
        outline: 1px solid #e3165b;
        border-color: #e3165b;
    }
    .material .char_block.e-active {
        outline: 1px solid #e3165b;
        border-color: #e3165b;
    }
    .material-dark .char_block.e-active {
        outline: 1px solid #56a4fd;
        border-color: #56a4fd;
    }
    .fabric .char_block.e-active,
    .fabric-dark .char_block.e-active {
        outline: 1px solid #0078d6;
        border-color: #0078d6;
    }
    .bootstrap4 .char_block.e-active {
        outline: 1px solid #007bff;
        border-color: #007bff;
    }
    .bootstrap .char_block.e-active,
    .bootstrap-dark .char_block.e-active {
        outline: 1px solid #317ab9;
        border-color: #317ab9;
    }
    .highcontrast .char_block.e-active {
        outline: 1px solid #ffd939;
        border-color: #ffd939;
    }
    .tailwind .char_block.e-active {
        outline: 1px solid #3730a3;
        border-color: #3730a3;
    }
    .tailwind-dark .char_block.e-active {
        outline: 1px solid #22d3ee;
        border-color: #22d3ee;
    }
    .bootstrap5 .char_block.e-active,
    .bootstrap5-dark .char_block.e-active {
        outline: 1px solid #0D6EFD;
        border-color: #0D6EFD;
    }
    .fluent .char_block.e-active,
    .fluent-dark .char_block.e-active {
        outline: 1px solid #0078DE;
        border-color: #0078DE;
    }
    .char_block {
        width: 30px;
        height: 30px;
        line-height: 30px;
        margin: 0 5px 5px 0;
        text-align: center;
        vertical-align: middle;
        border: 1px solid #DDDDDD;
        font-size: 20px;
        cursor: pointer;
        user-select: none;
        display: inline-block;
    }
    #rteEmoticons-smiley, #rteEmoticons-animal {
        padding: 15px 0 15px 15px;
    }
    #emot_tbar .rteinsertemot {
        font-size: 18px;
    }
    @@media (min-width: 320px) and (max-width: 480px) {
        #rteEmoticons-smiley, #rteEmoticons-animal {
            padding: 15px 0 15px 0px;
        }
    }
    #rteSection {
        min-height: 500px;
    }
    .bootstrap4 #emotIcons.e-tab .e-tab-header .e-toolbar-item .e-text-wrap:not(.e-horizontal-bottom),
    .bootstrap4 #emotIcons.e-tab .e-tab-header .e-toolbar-item.e-active .e-text-wrap:not(.e-horizontal-bottom) {
        height: 32px;
    }
</style>