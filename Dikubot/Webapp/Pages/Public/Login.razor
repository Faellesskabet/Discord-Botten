@page "/connect"
@using Microsoft.AspNetCore.Http
@using System.Net
@using Dikubot.Webapp.Authentication
@using Dikubot.Webapp.Authentication.Identities
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager;
@inject IHttpContextAccessor _httpContextAccessor;

<link rel="stylesheet" href="css/diku/login.css"/>
<div class="d-flex align-center gap-8 flex-column justify-center"
     style="margin-left: 5%; margin-right: 5%; margin-top: 5vh;">
    <div class="flex-grow-0" style="margin-top: 10px;">
        <MudText Typo="Typo.h2" Style="color: #c43a3f;">kuliv.dk</MudText>
        <MudText Typo="Typo.body1">A hub of Discord communities for The University of Copenhagen</MudText>
    </div>
    <div class="@_growState" style="margin-bottom: 10px; margin-top: 10px;">
        @if (_state == State.ConnectDiscord)
        {
            <ConnectDiscord Parent="@(this)"/>
        }
        @if (_state == State.ConnectEmail)
        {
            <ConnectEmail Parent="@(this)"/>
        }
        @if (_state == State.ConnectName)
        {
            <ConnectName Parent="@(this)"/>
        }
        @if (_state == State.SelectGuild)
        {
            <SelectGuild Parent="@(this)"/>
        }
        @if (_state == State.NoAccess)
        {
            <h1>Du har ikke adgang til KULiv server</h1>
        }
    </div>
</div>
<br/>
<ul class="circles">
    <li></li>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
</ul>


@code {

    [Parameter]
    public string AuthCode { get; set; }

    private enum State
    {
        ConnectDiscord,
        ConnectEmail,
        ConnectName,
        SelectGuild,
        NoAccess
    }

    private State _state;
    private string _growState = "";
    private AuthenticationState authState;

    protected override async Task OnInitializedAsync()
    {
        if (_httpContextAccessor.HttpContext != null && !_httpContextAccessor.HttpContext.Response.HasStarted
            && _httpContextAccessor.HttpContext.Request.Path.HasValue && !_httpContextAccessor.HttpContext.Request.Path.Value.Equals("/"))
        {
            _httpContextAccessor.HttpContext.Response.StatusCode = (int)HttpStatusCode.Unauthorized;
        }
        _state = await getState();
        _growState = _state == State.SelectGuild ? "flex-grow-1" : "flex-grow-0";
    }

    private async Task<State> getState()
    {
        authState = await ((Authenticator)AuthenticationStateProvider).GetAuthenticationStateAsync();
        DiscordIdentity discord = (DiscordIdentity)authState.User.Identity;

        if (discord?.DiscordUserGlobalModel == null)
        {
            return State.ConnectDiscord;
        }

        if (!discord.DiscordUserGlobalModel.Verified)
        {
            return State.ConnectEmail;
        }

        if (string.IsNullOrWhiteSpace(discord.DiscordUserGlobalModel.Name))
        {
            return State.ConnectName;
        }

        return discord.DiscordUserGlobalModel.IsBanned ? State.NoAccess : State.SelectGuild;
    }


    public async void Update()
    {
        authState = await ((Authenticator)AuthenticationStateProvider).GetAuthenticationStateAsync();
        DiscordIdentity discord = (DiscordIdentity)authState.User.Identity;
        if (discord != null && discord.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        _state = await getState();
        await InvokeAsync(() => { StateHasChanged(); });
    }

}