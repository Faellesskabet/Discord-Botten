@page "/connect"
@using Dikubot.Webapp.Authentication
@using Microsoft.AspNetCore.Http
@using Microsoft.Graph
@using UserIdentity = Dikubot.Webapp.Authentication.UserIdentity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager;
@inject IHttpContextAccessor httpContextAccessor;

<link rel="stylesheet" href="css/diku/login.css"/>
<div class="d-flex align-center gap-8 flex-column justify-center" 
     style="height: 75vh; margin-left: 5%; margin-right: 5%;">
    <div class="flex-grow-0" style="margin-top: 10px;">
        <MudText Typo="Typo.h2" Style="color: #c43a3f;">kuliv.dk</MudText>
        <MudText Typo="Typo.body1">A hub of Discord communities for The University of Copenhagen</MudText>
    </div>
    <div class="@_growState" style="margin-bottom: 10px; margin-top: 10px;">
        @if (_state == State.ConnectDiscord)
        {
            <ConnectDiscord parent="@this"/>
        }
        @if (_state == State.ConnectEmail)
        {
            <ConnectEmail parent="@this"/>
        }
        @if (_state == State.ConnectName)
        {
            <ConnectName parent="@this"/>
        }
        @if (_state == State.SelectGuild)
        {
            <SelectGuild parent="@this"/>
        }
        @if (_state == State.NoAccess)
        {
            <h1>Du har ikke adgang til KULiv server</h1>
        }
    </div>
</div>
    <br/>
<ul class="circles">
    <li></li>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
</ul>


@code {
    [Parameter]
    public string AuthCode { get; set; }

    private enum State
    {
        ConnectDiscord,
        ConnectEmail,
        ConnectName,
        SelectGuild,
        NoAccess
    }

    private State _state;
    private String _growState = "";
    private AuthenticationState authState;

    protected override async Task OnInitializedAsync()
    {
        _state = await getState();
        _growState = _state == State.SelectGuild ? "flex-grow-1 overflow-auto" : "flex-grow-0 overflow-auto";
    }

    private async Task<State> getState()
    {
        authState = await ((Authenticator) AuthenticationStateProvider).GetAuthenticationStateAsync();
        UserIdentity user = (UserIdentity) authState.User.Identity;

        if (user?.UserGlobalModel == null)
        {
            return State.ConnectDiscord;
        }

        if (!user.UserGlobalModel.Verified)
        {
            return State.ConnectEmail;
        }

        if (string.IsNullOrWhiteSpace(user.UserGlobalModel.Name))
        {
            return State.ConnectName;
        }
        
        return user.UserGlobalModel.IsBanned ? State.NoAccess : State.SelectGuild;
    }


    public async void Update()
    {
        authState = await ((Authenticator) AuthenticationStateProvider).GetAuthenticationStateAsync();
        UserIdentity user = (UserIdentity) authState.User.Identity;
        if (user != null && user.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        _state = await getState();
        await InvokeAsync(() => { StateHasChanged(); });
    }

}