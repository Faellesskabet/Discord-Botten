@page "/admin/event/create"
@page "/admin/event/edit/{uuid}"

@using Dikubot.Webapp.Authentication
@using global::Discord.WebSocket
@using Dikubot.DataLayer.Database.Global.User
@using Dikubot.DataLayer.Database.Guild.Models.Calendar.Events

@using Dikubot.DataLayer.Database.Guild.Models.User
@using Dikubot.Webapp.Shared.Dialog
@using Microsoft.AspNetCore.Components
@using Dikubot.DataLayer.Database.Global.Tags
@using Dikubot.DataLayer.Database.Global.Event
@using Dikubot.DataLayer.Database.Global.Calendar
@inject UserService _user
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject EventsMongoService EventsMongoService
@inject CalendarMongoService CalendarMongoService
@inject TagMongoService TagMongoService
@attribute [Authorize(Roles = Permissions.GlobalAdmin)]

@if (!_loading)
{
    <MudContainer>
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h5">Eventet: @_model.Subject</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <EventInput @bind-Value="_model"></EventInput>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveSettings">Gem indstillinger</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="DiscardSettings">Gem ikke indstillinger</MudButton>
                </MudCardActions>
                
            </MudCard>
    </MudContainer>
}
else
{
    <Loading></Loading>
}

@code {
    [Parameter]
    public string? uuid { get; set; }
    
    [Inject] private IDialogService DialogService { get; set; }

    private MudTable<EventModel> _table;
    private bool _loading = true;
    private UserGlobalModel _userGlobalModel;
    private SocketGuild _guild;
    private EventModel _model;
    
    protected override async Task OnInitializedAsync()
    {
        _userGlobalModel = await ((Authenticator)AuthenticationStateProvider).GetUserGlobal();
        _guild = _userGlobalModel.GetSelectedGuild();
        _model = Guid.TryParse(uuid, out Guid guid) ? EventsMongoService.Get(guid) : new EventModel() {CreateBy = _userGlobalModel.DiscordId};
        _loading = false;
    }
    
    private async void SaveSettings()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Er du sikker på du vil gemme dine indstillinger?");
        parameters.Add("ButtonText", "Gem");
        parameters.Add("Color", Color.Success);
        DialogResult result = await DialogService.Show<ConfirmDialog>("Gem", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }
        EventsMongoService.Upsert(_model);
    }

    
    private async void DiscardSettings()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Er du sikker på du vil slette dine ændringer?");
        parameters.Add("ButtonText", "Slet Ændringer");
        parameters.Add("Color", Color.Warning);
        DialogResult result = await DialogService.Show<ConfirmDialog>("Slet Ændringer", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }
        
        _model = Guid.TryParse(uuid, out Guid guid) ? EventsMongoService.Get(guid) : new EventModel();
        this.StateHasChanged();
    }




}