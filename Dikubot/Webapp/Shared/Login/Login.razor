@page "/login"
@using System.Security.Claims
@using Dikubot.Discord.Command
@using Dikubot.Webapp.Authentication
@using global::Discord.WebSocket
@using Microsoft.AspNetCore.Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager;
@inject IHttpContextAccessor httpContextAccessor;

<div class="page">
    <div class="blur"></div>
    <div class="login">
        @if (_state == State.ConnectDiscord)
        {
            <ConnectDiscord parent="@this"/>
        }
        @if (_state == State.ConnectEmail)
        {
            <ConnectEmail parent="@this"/>
        }
        @if (_state == State.ConnectName)
        {
            <ConnectName parent="@this"/>
        }
        @if (_state == State.SelectGuild)
        {
            <SelectGuild parent="@this"/>
        }
        @if (_state == State.NoAccess)
        {
            <h1>Du har ikke adgang til KU-Liv server</h1>
        }
    </div>
</div>



@code {
    [Parameter]
    public string AuthCode { get; set; }
    
    private enum State
    {
        ConnectDiscord,
        ConnectEmail,
        ConnectName,
        SelectGuild,
        NoAccess
    }

    private State _state;
    private AuthenticationState authState;

    protected override async Task OnInitializedAsync()
    {
        _state = await getState();
    }

    private async Task<State> getState()
    {
        authState = await ((Authenticator) AuthenticationStateProvider).GetAuthenticationStateAsync();
        UserIdentity user = (UserIdentity) authState.User.Identity;

        if (user?.UserGlobalModel == null)
        {
            return State.ConnectDiscord;
        }

        if (!user.UserGlobalModel.Verified)
        {
            return State.ConnectEmail;
        }

        if (string.IsNullOrWhiteSpace(user.UserGlobalModel.Name))
        {
            return State.ConnectName;
        }
        
        return user.UserGlobalModel.IsBanned ? State.NoAccess : State.SelectGuild;
    }


    public async void Update()
    {
        authState = await ((Authenticator) AuthenticationStateProvider).GetAuthenticationStateAsync();
        UserIdentity user = (UserIdentity) authState.User.Identity;
        if (user != null && user.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        _state = await getState();
        await InvokeAsync(() => { StateHasChanged(); });
    }

}