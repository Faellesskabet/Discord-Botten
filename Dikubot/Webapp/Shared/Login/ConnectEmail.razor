@using global::Discord.WebSocket
@using Dikubot.Discord.Command
@using Dikubot.DataLayer.Database.Global.Session
@using Dikubot.DataLayer.Database.Global.User
@using Dikubot.DataLayer.Database.Guild.Models.User
@using Dikubot.DataLayer.Logic.Email
@using Dikubot.DataLayer.Logic.Email.Emails
@using Dikubot.DataLayer.Logic.User
@using Dikubot.DataLayer.Logic.Validators
@using Dikubot.DataLayer.Permissions
@using Dikubot.DataLayer.Static
@using Dikubot.Discord
@using Dikubot.Webapp.Authentication
@using SendGrid.Helpers.Mail

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime


<link href="css/diku/login.css" rel="stylesheet"/>
<h1>Velkommen til KULiv</h1>
@if (String.IsNullOrEmpty(secretPassword))
{
    <MudCard>
        <MudCardHeader>
            @if (incorrectPassword)
            {
                <MudAlert Severity="Severity.Error">Koden du indtastede er desværre ikke korrekt, du bedes derfor indtaste din email igen.</MudAlert>
            }
            <MudText Typo="Typo.h6">Bekræft din KU-mail</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudForm>
                <MudTextField 
                    @bind-Value="email"
                    Validation="@_kuEmailValidation.Validation"
                    Immediate="@true"
                    AutoFocus="@true"
                    HelperText="Vi skal bruge din email, for at bekræfte du går på KU"
                    Label="KU Email"
                    OnKeyDown="@EmailOnEnter">
                </MudTextField>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton OnClick="@SendEmail">Send email</MudButton>
            <MudButton Link="Account/Logout" Color="Color.Error">Logud</MudButton>
        </MudCardActions>
    </MudCard>   
}
else
{
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h6">Vi har sendt en kode til din email: @(email)</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudForm>
                <MudTextField 
                    @bind-Value="passwordInput"
                    Validation="@_kuEmailValidation"
                    Immediate="@true"
                    AutoFocus="@true"
                    HelperText="Du kan finde koden i din email"
                    Label="Indtast koden her"
                    OnKeyDown="@PasswordOnEnter">
                </MudTextField>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton OnClick="@ConfirmEmailPassword">Bekræft kode</MudButton>
        </MudCardActions>
    </MudCard>
}


@code {
     [Parameter]
    public Login parent { get; set; }


    private KUEmailValidation _kuEmailValidation = new KUEmailValidation();
    private Authenticator authenticator;
    private UserIdentity user;
    private string email = "";
    private string secretPassword = "";
    private string passwordInput = "";
    bool incorrectPassword = false;

    public void EmailOnEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            SendEmail();
        }
    }
    
    public void PasswordOnEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            ConfirmEmailPassword();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        authenticator = ((Authenticator) AuthenticationStateProvider);
        var authState = await authenticator.GetAuthenticationStateAsync();
        user = (UserIdentity) authState.User.Identity;
    }
    
    private async void SendEmail()
    {
        if (!(await _kuEmailValidation.ValidateAsync(email)).IsValid)
        {
            return;
        }

        secretPassword = Util.SimpleRandomString(12);
        VerificationEmail verification = new VerificationEmail(new EmailAddress(email), secretPassword);
        await EmailService.SendEmail(verification);
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void ConfirmEmailPassword()
    {
        if (string.IsNullOrEmpty(secretPassword) || !secretPassword.Equals(passwordInput))
        {
            passwordInput = "";
            email = "";
            incorrectPassword = true;
            secretPassword = "";
            await InvokeAsync(() => { StateHasChanged(); });
            return;
        }
        IReadOnlyCollection<SocketGuild> mutualGuilds = DiscordBot.Client.GetUser(user.UserGlobalModel.DiscordIdLong).MutualGuilds;
        UserGlobalServices userGlobalServices = new UserGlobalServices();
        foreach(SocketGuild mutualGuild in mutualGuilds)
        {
            UpdateUserInGuild(mutualGuild, userGlobalServices);
        }
        user.UserGlobalModel.Email = email;
        user.UserGlobalModel.Verified = true;
        userGlobalServices.Upsert(user.UserGlobalModel);
        await authenticator.UpdateSession();
        parent.Update();
    }
    public async void UpdateUserInGuild(SocketGuild guild, UserGlobalServices userGlobalServices)
    {
        UserGuildServices userGuildServices = new UserGuildServices(guild);
        PermissionsService permissionsService = new PermissionsService(guild);
        UserGuildModel newUser = userGuildServices.Get(user.UserGlobalModel.DiscordId);
        
    //In case the email already exists, then we simply override the old user with the new user, while removing the old user's roles on the Discord server
        if (userGlobalServices.EmailExists(email))
        {
        //We get the old user
            UserGuildModel oldUser = userGuildServices.Get(userGlobalServices.GetFromEmail(email).DiscordId);

            if (oldUser.DiscordId != newUser.DiscordId)
            {
    //We override the old user's id and set our current user to old user
                string oldId = oldUser.DiscordId;
                oldUser.DiscordId = newUser.DiscordId;
                newUser = oldUser;

        //We now update all the Discord roles of our users. The old discord user will have all their roles removed, while the new user will get all the old user's roles.
                permissionsService.SetDiscordUserRoles(new UserGuildModel() {DiscordId = oldId});   
            }
        }
        
        permissionsService.SetDiscordUserRoles(newUser);
        
        string name = new KUUser(email.Split("@")[0]).GetName();
        if (name != "")
        {
            newUser.Name = name;
            try
            {
                await guild.GetUser(Convert.ToUInt64(newUser.DiscordId)).ModifyAsync(guildUser =>
                {
                    guildUser.Nickname = name;
                });
            }
            catch (Exception e)
            {
    //ignored
            }
        }
        userGuildServices.Upsert(newUser);        
    }
}