@using Dikubot.DataLayer.Database.Guild
@using Dikubot.DataLayer.Database.Guild.Models.User
@using Dikubot.DataLayer.Logic.Email
@using Dikubot.DataLayer.Logic.Email.Emails
@using Dikubot.DataLayer.Logic.User
@using Dikubot.DataLayer.Logic.Validators
@using Dikubot.DataLayer.Permissions
@using Dikubot.DataLayer.Static
@using Dikubot.Discord
@using Dikubot.Webapp.Authentication
@using Dikubot.Webapp.Authentication.Identities
@using global::Discord.WebSocket
@using SendGrid.Helpers.Mail
@using Dikubot.DataLayer.Database.Global.User.DiscordUser
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime
@inject DiscordUserGlobalMongoService DiscordUserGlobalMongoService
@inject IGuildMongoFactory GuildMongoFactory

@if (string.IsNullOrEmpty(_secretPassword))
{
    <MudCard>
        <MudCardHeader>
            @if (_incorrectPassword)
            {
                <MudAlert Severity="Severity.Error">
                    <Localization>
                        <Danish>Koden du indtastede er desværre ikke korrekt, du bedes derfor indtaste din email igen.</Danish>
                        <English> Unfortunately, the code you entered is not correct, so please enter your email again. </English>
                    </Localization>
                </MudAlert>
            }
            @if (_emailTaken)
            {
                <MudAlert Severity="Severity.Error">
                    <Localization>
                        <Danish>Emailen @(_email) er allerede i brug. Log ind på din anden Discord profil eller kontakt en administrator: <MudField> Support@kuliv.dk </MudField>.</Danish>
                        <English>The email @(_email) is already in use. Log in to your other Discord profile or contact an administrator: <MudField> Support@kuliv.dk </MudField>.</English>
                    </Localization>

                </MudAlert>
            }
            <MudText Typo="Typo.h6">
                <Localization>
                    <Danish>
                        Bekræft din KU-mail
                    </Danish>
                    <English>
                        Confirm your KU email
                    </English>
                </Localization>
            </MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudForm>
                <MudTextField
                    @bind-Value="_email"
                    Validation="@_kuEmailValidation.Validation"
                    Immediate="@true"
                    AutoFocus="@true"
                    HelperText="Vi skal bruge din email, for at bekræfte du går på KU"
                    Label="KU Email"
                    OnKeyDown="@EmailOnEnter">
                </MudTextField>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton OnClick="@SendEmail">Send email</MudButton>
            <MudButton Link="Logout" Color="Color.Error">Logud</MudButton>
        </MudCardActions>
    </MudCard>
}
else
{
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">
                <Localization>
                    <Danish>Vi har sendt en kode til din email: @(_email)</Danish>
                    <English>We have sent a code to your email: @(_email)</English>
                </Localization>
            </MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudText Typo="Typo.body1">
                <Localization>
                    <Danish>
                        Hvis du ikke har modtaget en email inden for 2 min, så følg denne guide:
                        <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
                            Quarantine Center Guide.
                        </MudButton>
                    </Danish>
                    <English>
                        If you have not received an email within 2 minutes, try our guide:
                        <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
                            Quarantine Center Guide.
                        </MudButton>
                    </English>
                </Localization>
            </MudText>
            <MudForm>
                <MudTextField
                    @bind-Value="_passwordInput"
                    Validation="@_kuEmailValidation"
                    Immediate="@true"
                    AutoFocus="@true"
                    HelperText="Du kan finde koden i din email"
                    Label="Indtast koden her"
                    OnKeyDown="@PasswordOnEnter">
                </MudTextField>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton OnClick="@ConfirmEmailPassword">Bekræft kode</MudButton>
            <MudButton Link="Logout" Color="Color.Error">Logud</MudButton>
        </MudCardActions>
    </MudCard>
}


<MudDialog @bind-IsVisible="_visible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            How To Comfirm your Email
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height:300px; overflow-y: scroll">
            <HowToComfirmEmail></HowToComfirmEmail>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Class="px-10">Close</MudButton>
    </DialogActions>
</MudDialog>


@code {

    [Parameter]
    public Login Parent { get; set; }

    private bool _visible;
    private int _rating;

    private void OpenDialog()
    {
        _visible = true;
    }

    void Submit()
    {
        _visible = false;
    }

    private DialogOptions _dialogOptions = new() { FullWidth = true, MaxWidth = MaxWidth.Large };

    private KUEmailValidation _kuEmailValidation = new();
    private Authenticator _authenticator;
    private DiscordIdentity _discord;
    private string _email = "";
    private string _secretPassword = "";
    private string _passwordInput = "";
    bool _incorrectPassword = false;
    bool _emailTaken = false;

    public void EmailOnEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            SendEmail();
        }
    }

    public void PasswordOnEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            ConfirmEmailPassword();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _authenticator = (Authenticator)AuthenticationStateProvider;
        AuthenticationState authState = await _authenticator.GetAuthenticationStateAsync();
        _discord = (DiscordIdentity)authState.User.Identity;
    }

    private async void SendEmail()
    {
        if (!(await _kuEmailValidation.ValidateAsync(_email)).IsValid)
        {
            return;
        }

        _secretPassword = Util.SimpleRandomStringNumbers(6);
        Console.WriteLine(_secretPassword);
        VerificationEmail verification = new VerificationEmail(new EmailAddress(_email), _secretPassword);
        await EmailService.SendEmail(verification);
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void ConfirmEmailPassword()
    {
        if (string.IsNullOrEmpty(_secretPassword) || !_secretPassword.Equals(_passwordInput))
        {
            _passwordInput = "";
            _email = "";
            _incorrectPassword = true;
            _secretPassword = "";
            await InvokeAsync(() => { StateHasChanged(); });
            return;
        }


    // If the user already exists, throw an error at them!
        if (DiscordUserGlobalMongoService.EmailExists(_email))
        {
            _emailTaken = true;
            _passwordInput = "";
            _email = "";
            _secretPassword = "";
            await InvokeAsync(() => { StateHasChanged(); });
            return;
        }

    // null if user or no mutual guilds can be found.
        IReadOnlyCollection<SocketGuild> mutualGuilds = DiscordBot.ClientStatic.GetUser(_discord.DiscordUserGlobalModel.DiscordIdLong)?.MutualGuilds;

        _discord.DiscordUserGlobalModel.Email = _email;
        _discord.DiscordUserGlobalModel.Verified = true;
        DiscordUserGlobalMongoService.Upsert(_discord.DiscordUserGlobalModel);
        if (mutualGuilds != null)
            foreach (SocketGuild mutualGuild in mutualGuilds)
            {
                UpdateUserInGuild(mutualGuild, DiscordUserGlobalMongoService);
            }
        await _authenticator.UpdateSession();
        Parent.Update();
    }

    private async void UpdateUserInGuild(SocketGuild guild, DiscordUserGlobalMongoService discordUserGlobalMongoService)
    {
        UserGuildMongoService userGuildMongoService = GuildMongoFactory.Get<UserGuildMongoService>(guild);
        PermissionsService permissionsService = GuildMongoFactory.Get<PermissionsService>(guild);
        UserGuildModel newUser = userGuildMongoService.Get(_discord.DiscordUserGlobalModel.DiscordId);

        await permissionsService.SetDiscordUserRoles(newUser);

        string name = new KUUser(_email.Split("@")[0]).GetName();
        if (name != "")
        {
            newUser.Name = name;
            try
            {
                await guild.GetUser(Convert.ToUInt64(_discord.DiscordUserGlobalModel.DiscordId)).ModifyAsync(guildUser => { guildUser.Nickname = name; });
            }
            catch (Exception e)
            {
    //ignored
            }
        }
        userGuildMongoService.Upsert(newUser);
    }

}