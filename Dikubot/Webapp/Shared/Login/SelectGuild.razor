@using Dikubot.Webapp.Authentication
@using global::Discord
@using global::Discord.WebSocket
@using Dikubot.DataLayer.Database.Global.GuildSettings
@using Dikubot.DataLayer.Database.Global.Session
@using Dikubot.Discord
@using Dikubot.Webapp.Pages
@using Data.Discord
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime;

@if (!_loaded)
{
    <Loading/>
}
else
{
    <h1>Dine fællesskaber:</h1>
    <GuildWidgetCollection Guilds="_mutualGuilds.Select(SocketToModelGuild).ToList().Concat(_complementGuilds).ToList()"></GuildWidgetCollection>
}
@code {
    [Parameter]
    public Login parent { get; set; }

    private bool _loaded = false;
    private Authenticator _authenticator;
    private UserIdentity _user;
    private HashSet<SocketGuild> _mutualGuilds; // we use a hashmap because it's faster:)
    private List<GuildWidgetDto> _complementGuilds; // guilds that are not mutual
    private IUser _discordUser;
    private GuildSettingsService _guildSettingsService = new GuildSettingsService();
    private string _mutualSearchQuery = "";
    private string _complementSearchQuery = "";
    
    
    // this code is terribly optimized
    protected override async Task OnInitializedAsync()
    {
        _authenticator = ((Authenticator) AuthenticationStateProvider);
        var authState = await _authenticator.GetAuthenticationStateAsync();
        _user = (UserIdentity) authState.User.Identity;

        _discordUser = _user?.UserGlobalModel.DiscordUser;
        if (_discordUser == null)
        {
            // this shouldn't really happen but if it does alert the user: 
            await JsRuntime.InvokeVoidAsync("alert", "Der er problemer med din bruger. Prøv at clear dine cookies og refresh, eller kontakt en Administrator");
            return;
        }
        
        SocketUser socketUser = DiscordBot.ClientStatic.GetUser(_discordUser.Id);
        _mutualGuilds = new HashSet<SocketGuild>();
        if (socketUser != null)
        {
            _mutualGuilds = socketUser.MutualGuilds.ToHashSet();   
        }

        _complementGuilds = DiscordBot.ClientStatic.Guilds.Where(guild => !_mutualGuilds.Contains(guild)).Select(guild => new GuildWidgetDto(_guildSettingsService.Get(guild), false)).ToList();
        _loaded = true;
        this.StateHasChanged();
    }

    private GuildWidgetDto SocketToModelGuild(SocketGuild guild)
    {
        GuildSettingsService guildSettingsService = new GuildSettingsService();
        GuildSettingsModel guildSettingsModel = guildSettingsService.Get(model => model.GuildId == guild.Id) ?? new GuildSettingsModel(guild);
        return new GuildWidgetDto(guildSettingsModel, true);
    }
}