@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Http
@using Dikubot.DataLayer.Database.Global.User
@using Dikubot.Webapp.Authentication
@using System.Security.Claims
@using Dikubot.DataLayer.Database.Global.Session.DiscordAuthentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IJSRuntime JsRuntime

@inject NavigationManager Navigation;
@inject IHttpContextAccessor HttpContextAccessor;
@inject UserGlobalMongoService UserGlobalMongoService;

@if ((_discordUser == null || !_discordUser.HasClaim(claim => claim.Issuer == "Discord")) && !_loading)
{
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h6">
                <Localization>
                    <Danish>
                        Log-in med Discord
                    </Danish>
                    <English>
                        Log in with Discord
                    </English>
                </Localization>
            </MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudText Typo="Typo.body1">
                <Localization>
                    <Danish>
                        For at tilgå kuliv.dk, skal du logge ind med en Discord bruger.
                    </Danish>
                    <English>
                        To access kuliv.dk, you must log in with a Discord user.
                    </English>
                </Localization>
            </MudText>
        </MudCardContent>
        <MudCardActions>
            <MudLink Href="/login">
                <MudButton Variant="Variant.Filled" Color="Color.Primary">
                    <Localization>
                        <Danish>
                            Login med Discord
                        </Danish>
                        <English>
                            Login with Discord
                        </English>
                    </Localization>
                </MudButton>
            </MudLink>
            <MudLink>
                <MudButton Variant="Variant.Text" Color="Color.Primary">
                    <Localization>
                        <Danish>Skriv til support@kuliv.dk for hjælp</Danish>
                        <English>Write to support@kuliv.dk for help</English>
                    </Localization>
                </MudButton>
            </MudLink>
        </MudCardActions>
    </MudCard>
}
else if (!_loading)
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Image="discordUser.GetAvatarUrl()" Size="Size.Large" Color="Color.Primary"></MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Er dette dig?</MudText>
                <MudText Typo="Typo.body1">@HttpContextAccessor.HttpContext.User.Identity.Name! </MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardActions>
            <MudButton Color="Color.Success" OnClick=@(ApproveDiscord)>Ja, godkend</MudButton>
            <MudButton Color="Color.Error" OnClick=@(RejectDiscord)>Nej, afvis</MudButton>
        </MudCardActions>
    </MudCard>
}




@code {

    [Parameter]
    public Login Parent { get; set; }

    [Parameter]
    public string AuthCode { get; set; }

    private Authenticator _authenticator;
    private ClaimsPrincipal _discordUser;
    private string _clientId, _clientSecret, _redirectUrl;
    private bool _loading;
    private DiscordAuthenticationModel _discordAuthenticationModel;


    protected override async Task OnInitializedAsync()
    {
        _discordUser = HttpContextAccessor.HttpContext?.User;
    }


    private async Task RejectDiscord()
    {
        _discordUser = null;
        await OnInitializedAsync();
        await InvokeAsync(() => { StateHasChanged(); });
        Navigation.NavigateTo("/Logout", true);
    }

    private async Task ApproveDiscord()
    {
        string id = ulong.Parse(_discordUser.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value).ToString();

        if (!UserGlobalMongoService.Exists(model => model.DiscordId == id))
        {
            UserGlobalModel userModel = UserGlobalMongoService.Get(id);
            UserGlobalMongoService.Upsert(userModel);
        }

        await _authenticator.UpdateSession();
        Parent.Update();
    }


}