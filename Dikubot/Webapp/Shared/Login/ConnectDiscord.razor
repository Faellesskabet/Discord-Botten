@using Dikubot.Webapp.Logic
@using global::Discord.WebSocket
@using Dikubot.Discord.Command
@using Dikubot.Database.Models
@using Dikubot.Database.Models.Session
@using Dikubot.DataLayer.Logic.User
@using Dikubot.DataLayer.Static
@using Dikubot.Discord
@using global::Discord
@using Azure.Core
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.OAuth
@using Microsoft.AspNetCore.Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IJSRuntime jsRuntime
@using Microsoft.Net.Http
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.Extensions.Options
@using Newtonsoft.Json.Linq
@using System.Net.Http.Headers
@using System.Security.Claims
@using global::Discord.Rest
@using Microsoft.Graph
@using UserIdentity = Dikubot.Webapp.Logic.UserIdentity
@using System.Configuration
@using System.IO
@using System.Net
@using System.Text
@using Dikubot.Discord
@using Microsoft.Extensions.Configuration

<h1>Velkommen til DIKU's Discord Server</h1>

@if (discordUser == null && !loading)
{
    <div class="card w-auto h-auto shadow">
        <div class="card-body">
            <h5 class="card-title">Login ind</h5>
            <div class="discordConnect">
                <BFUCompoundButton Href="@loginURL()" Primary="true" Text="Login med Discord" SecondaryText="Klik her for at logge ind med Discord" ClassName="login-button"></BFUCompoundButton>
            </div>
            <a href="https://dnur.dk/" class="text-decoration-none" target="_blank">
                <p class="text-xl-left">Klik her for hjælp</p>
            </a>
        </div>
    </div>
}
else if (discordUser != null)
{
    <div class="card w-auto h-auto shadow">
        <div class="card-body">
            <h5 class="card-title">Er dette dig?</h5>
            <BFUPersona Size="120" CoinSize="120" Text="@DiscordNameMentionCombo(discordUser)" Presence="GetPresenceStatus(discordUser)"
                        ImageUrl="@discordUser.GetAvatarUrl()" ImageAlt="@discordUser.GetDefaultAvatarUrl()"
                        Style="padding-bottom: 5px"/>
            <div class="line"></div>
            <BFUStack Horizontal="true" HorizontalAlign="Alignment.Center" Tokens=@(new BFUStackTokens() {ChildrenGap = new[] {10.0}})>
                <BFUPrimaryButton Text="Ja, godkend" OnClick=@(ApproveDiscord) />
                <BFUDefaultButton Text="Nej, afvis" OnClick=@(RejectDiscord) Style="background-color: #f08080"/>
            </BFUStack>

        </div>
    </div>
}




@code {
    [Parameter]
    public Login parent { get; set; }
    
    [Parameter]
    public string AuthCode { get; set; }
    
    
    private string password;
    private Authenticator authenticator;
    private SocketUser discordUser;
    private string client_id, client_secret, redirect_url;
    private bool loading;
    
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        authenticator = ((Authenticator) AuthenticationStateProvider);
        var authState = await authenticator.GetAuthenticationStateAsync();
        UserIdentity user = (UserIdentity) authState.User.Identity;

        client_id = Configuration.GetValue<string>("DiscordAuth:CLIENT_ID");
        client_secret = Configuration.GetValue<string>("DiscordAuth:CLIENT_SECRET");
        redirect_url = NavigationManager.BaseUri;
        
        if (AuthCode != null)
        {
            try
            {
                JObject discordUserJson = GetUser(GetAuthtoken(AuthCode));
                ulong discordUserId = Convert.ToUInt64(discordUserJson["id"]);
                discordUser = DiscordBot.client.GetUser(discordUserId);
                await InvokeAsync(() => { StateHasChanged(); });
            }
            catch (Exception e)
            {
            // ignored
            }
        }
        loading = false;

    }

    public async void DiscordConnected(SocketUser user)
    {
        discordUser = user;
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private string DiscordNameMentionCombo(SocketUser user)
    {
        return $"{user.Username}#{user.Discriminator}";
    }

    private PersonaPresenceStatus GetPresenceStatus(SocketUser user)
    {
        switch (user.Status)
        {
            case UserStatus.Offline:
                return PersonaPresenceStatus.Offline;
            case UserStatus.Online:
                return PersonaPresenceStatus.Online;
            case UserStatus.Idle:
                return PersonaPresenceStatus.Away;
            case UserStatus.AFK:
                return PersonaPresenceStatus.Away;
            case UserStatus.DoNotDisturb:
                return PersonaPresenceStatus.DND;
            case UserStatus.Invisible:
                return PersonaPresenceStatus.Offline;
        }
        return PersonaPresenceStatus.None;
    }

    public string GetContactMessage()
    {
        return $"Send den følgende kommando til botten {DiscordBot.client.CurrentUser.Username}#{DiscordBot.client.CurrentUser.Discriminator}.";
    } 

    private async void RejectDiscord()
    {
        discordUser = null;
        await OnInitializedAsync();
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void ApproveDiscord()
    {
        SocketGuild guild = authenticator.GetGuild();
        UserServices userServices = new UserServices(guild);
        if (!userServices.Exists(discordUser))
        {
            UserModel userModel = new UserModel {DiscordUser = discordUser};
            new UserServices(guild).Upsert(userModel);
        }

        SessionModel sessionModel = new SessionModel(userServices.Get((discordUser)));
        await authenticator.UpdateSession(sessionModel);
        parent.Update();
    }
    
    
    // https://www.yogihosting.com/discord-api-asp-net/
    public string GetAuthtoken(string authCode)
    {
        
        /*Get Access Token from authorization code by making http post request*/
        HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create("https://discordapp.com/api/oauth2/token");
        webRequest.Method = "POST";
        string parameters = "client_id=" + client_id + "&client_secret=" + client_secret + "&grant_type=authorization_code&code=" + authCode + "&redirect_uri=" + redirect_url + "";
        byte[] byteArray = Encoding.UTF8.GetBytes(parameters);
        webRequest.ContentType = "application/x-www-form-urlencoded";
        webRequest.ContentLength = byteArray.Length;
        Stream postStream = webRequest.GetRequestStream();
  
        postStream.Write(byteArray, 0, byteArray.Length);
        postStream.Close();
        WebResponse response = webRequest.GetResponse();
        postStream = response.GetResponseStream();
        StreamReader reader = new StreamReader(postStream);
        string responseFromServer = reader.ReadToEnd();
  
        string tokenInfo = responseFromServer.Split(',')[0].Split(':')[1];
        
        return tokenInfo.Trim().Substring(1, tokenInfo.Length - 3);
    }

    public JObject GetUser(string accessToken)
    {
        /*Do http get request to the URL to get the client info in json*/ 
        HttpWebRequest webRequest1 = (HttpWebRequest)WebRequest.Create("https://discordapp.com/api/users/@me");
        webRequest1.Method = "Get";
        webRequest1.ContentLength = 0;
        webRequest1.Headers.Add("Authorization", "Bearer " + accessToken);
        webRequest1.ContentType = "application/x-www-form-urlencoded";
  
        string apiResponse1 = "";
        using (HttpWebResponse response1 = webRequest1.GetResponse() as HttpWebResponse)
            {
                StreamReader reader1 = new StreamReader(response1.GetResponseStream());
                apiResponse1 = reader1.ReadToEnd();
            }
            /*End*/
            return JObject.Parse(apiResponse1);
        }

        public string loginURL()
        {
            return $"https://discordapp.com/api/oauth2/authorize?response_type=code&client_id={client_id}&scope=identify%20guilds.join&state=15773059ghq9183habn&redirect_uri={redirect_url}";
        }

}