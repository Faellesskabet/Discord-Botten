
@using global::Discord.WebSocket
@using Dikubot.Discord.Command
@using Dikubot.DataLayer.Logic.User
@using Dikubot.DataLayer.Static
@using Dikubot.Discord
@using global::Discord
@using Azure.Core
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.OAuth
@using Microsoft.AspNetCore.Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IJSRuntime jsRuntime
@using Microsoft.Net.Http
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.Extensions.Options
@using Newtonsoft.Json.Linq
@using System.Net.Http.Headers
@using System.Security.Claims
@using global::Discord.Rest
@using System.Configuration
@using System.IO
@using System.Net
@using System.Text
@using Dikubot.DataLayer.Database.Global.Session
@using Dikubot.DataLayer.Database.Global.Session.DiscordAuthentication
@using Dikubot.DataLayer.Database.Global.User
@using Dikubot.Discord
@using Dikubot.Webapp.Authentication
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor _httpContextAccessor
@using Microsoft.AspNetCore.Components.Authorization
@using Dikubot.Webapp.Extensions

@using Color = MudBlazor.Color
@using System.Collections



<link href="css/diku/login.css" rel="stylesheet"/>
<h1>Velkommen til KULiv</h1>

@if (discordUser == null)
{
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h6">Log-in med Discord</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudText Typo="Typo.body1">For at tilgå KULiv, skal du logge ind med en Discord bruger.</MudText>
        </MudCardContent>
        <MudCardActions>
            
            @foreach (var scheme in ExternalProviders)
            {
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick=" () => SignIn(scheme.Name)"> Connect using @scheme.DisplayName </MudButton>
            }
            <a href="https://dnur.dk/"><MudButton Variant="Variant.Text" Color="Color.Primary">Klik her for hjælp</MudButton></a>
        </MudCardActions>
    </MudCard>
}
else if (discordUser != null)
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Image="@discordUser.GetAvatarUrl()" Size="Size.Large" Color="Color.Primary"></MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                 <MudText Typo="Typo.h6">Er dette dig?</MudText>
                <MudText Typo="Typo.body1">@DiscordNameMentionCombo(discordUser)</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardActions>
            <MudButton Color="Color.Success" OnClick=@(ApproveDiscord)>Ja, godkend</MudButton>
            <MudButton Color="Color.Error" OnClick=@(RejectDiscord)>Nej, afvis</MudButton>
        </MudCardActions>
    </MudCard>
}


@code {
    [Parameter]
    public Login parent { get; set; }
    
    [Parameter]
    public string AuthCode { get; set; }
    
    private Authenticator authenticator;
    private IUser discordUser;
    
    private DiscordAuthenticationModel _discordAuthenticationModel;
    
    static HttpContext context = new DefaultHttpContext();
    public AuthenticationScheme[] ExternalProviders;
    
    protected override async Task OnInitializedAsync()
    {
       
        var authState = await authenticator.GetAuthenticationStateAsync();
        UserIdentity user = (UserIdentity) authState.User.Identity;
    }



    private string DiscordNameMentionCombo(IUser user)
    {
        return $"{user.Username}#{user.Discriminator}";
    }



    private async Task RejectDiscord()
    {
        discordUser = null;
        await OnInitializedAsync();
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async Task ApproveDiscord()
    {
        UserGlobalServices userServices = new UserGlobalServices();
        if (!userServices.Exists(discordUser))
        {
            UserGlobalModel userModel = new UserGlobalModel {DiscordId = discordUser.Id.ToString()};
            userServices.Upsert(userModel);
        }
        
        SessionModel sessionModel = new SessionModel(userServices.Get((discordUser.Id.ToString())));
        sessionModel.DiscordAuthenticationModel = _discordAuthenticationModel;
        await authenticator.UpdateSession(sessionModel);
        parent.Update();
    }
    
    public async Task SignIn([FromForm] string provider)
    {
    
    }

}