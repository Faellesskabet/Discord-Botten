@using Microsoft.IdentityModel.Tokens
@using Microsoft.AspNetCore.Http
@using Dikubot.Discord
@using Dikubot.DataLayer.Database.Global.Tags
@using Dikubot.DataLayer.Database.Global.GuildSettings
@using Dikubot.Webapp.Authentication
@using Dikubot.Webapp.Authentication.Identities
@using Dikubot.DataLayer.Database.Global.User.DiscordUser
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor httpContextAccessor;
@inject UserService _userService
@inject DiscordUserGlobalMongoService DiscordUserGlobalMongoService
@inject TagMongoService TagMongoService

<MudCard Elevation="25" Style="min-width: 420px; max-width: 420px; max-height: 340px; min-height: 340px;">
    @if (!Guild.BannerUrl.IsNullOrEmpty())
    {
        <MudCardMedia Image="@Guild.BannerUrl" Style="object-fit: cover; height: 60px; min-height: 60px; width: 100%;"/>
    }
    else
    {
        <MudCardMedia Image="../images/placeholder-banner.png" Style="object-fit: cover; height: 60px; min-height: 60px; width: 100%;"/>
    }
    <div style="min-height: 28px; max-height: 28px;" class="d-flex justify-start flex-wrap">
        @foreach (TagsMainModel tag in Guild.Tags.Select(t => TagMongoService.Get(t)).ToList())
        {
            //Kan ikke gøres direkte :(
            string style = "background-color: " + tag.Color + ";" + "color: " + tag.TextColor + ";";
            <MudChip Style="@style" Size="Size.Small"> @tag.Name</MudChip>
        }
    </div>
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudAvatar Image="@Guild.LogoUrl"></MudAvatar>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.body1">@Guild.Name</MudText>
            <MudText Typo="Typo.body2">@DiscordBot.ClientStatic.GetGuild(Guild.GuildId).MemberCount Medlemmere</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent Style="max-height: 27%; min-height: 27%; overflow: scroll;">
        <MudText>@Guild.Description</MudText>
    </MudCardContent>
    <MudCardActions>
        @if (GuildWidgetDto.IsUserMember)
        {
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@GotoGuild">Gå til side</MudButton>
        }
        else
        {
            <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="@JoinGuild">Join fællesskab</MudButton>
        }
    </MudCardActions>
</MudCard>


@code {

    [Inject]
    private IDialogService DialogService { get; set; }

    [Parameter]
    public GuildWidgetDto GuildWidgetDto { get; set; }

    public GuildSettingsModel Guild => GuildWidgetDto.GuildSettingsModel;

    private async Task GotoGuild()
    {
        Authenticator authenticator = (Authenticator)AuthenticationStateProvider;
        AuthenticationState authState = await authenticator.GetAuthenticationStateAsync();
        DiscordIdentity discord = (DiscordIdentity)authState.User.Identity;
        DiscordUserGlobalModel discordUserModel = discord?.DiscordUserGlobalModel;

        if (discordUserModel == null)
        {
            await DialogService.ShowMessageBox("Fejl ???", "Der er sket en fejl. Prøv at clear dine cookies og refresh");
            return;
        }

        discordUserModel.SelectedGuild = Guild.GuildId;
        DiscordUserGlobalMongoService.Upsert(discord.DiscordUserGlobalModel);
        await authenticator.UpdateSession();
        NavigationManager.NavigateTo("/");
    }

    private async Task JoinGuild()
    {
        DiscordUserGlobalModel discordUserModel = await ((Authenticator)AuthenticationStateProvider).GetUserGlobal();
        if (discordUserModel == null)
        {
            await DialogService.ShowMessageBox("Fejl ???", "Der er sket en fejl. Prøv at clear dine cookies og refresh");
            return;
        }


        bool? result = await DialogService.ShowMessageBox(
            "Bekræft",
            "Du er ved at join et nyt fællesskab. Er du sikker?",
            "Join", cancelText: "Fortryd");

        if (!result.GetValueOrDefault())
        {
            return;
        }

        try
        {
            string accessToken = await _userService.GetTokenAsync();
            await DiscordBot.ClientStatic.GetGuild(Guild.GuildId).AddGuildUserAsync(discordUserModel.DiscordIdLong, accessToken);
        }
        catch (Exception e)
        {
            await DialogService.ShowMessageBox("Fejl ???", "Der er sket en fejl. Prøv at clear dine cookies og refresh");
            return;
        }
        await GotoGuild();
    }

}