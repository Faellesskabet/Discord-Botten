

@using Dikubot.DataLayer.Database.Global.User
@using Dikubot.DataLayer.Database.Guild.Models.Calendar
@using Dikubot.DataLayer.Database.Guild.Models.Calendar.Events
@using Dikubot.DataLayer.Database.Models
@using Dikubot.Extensions.search
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Data
@using Dikubot.DataLayer.Database.Global.Event
@using Dikubot.DataLayer.Database.Global.Calendar

@inject UserService UserService;
@inject EventsMongoService EventsMongoService

@namespace Dikubot.Extensions.Calender
<style>
    .e-quick-popup-wrapper{
    z-index: 1301 !important;
    }
    .mud-popover{
    z-index: 10001 !important;
    }
</style>

 @if (_loaded)   {
     <div class="control-section">
         <SfSchedule @ref="ScheduleObj" 
                     ID="schedule" 
                     TValue="EventModel"
                     Width="@WidgdetWidth" 
                     Height="@WidgdetHeight"
                     Readonly="ReadOnly"
                     ShowWeekNumber="true"
                     FirstDayOfWeek="1"
                     SelectedDateChanged="Callback">
             <ScheduleEventSettings TValue="EventModel" DataSource="@_arrangementData">
                 <ScheduleEvents TValue="EventModel" ActionCompleted="OnActionCompleted" ></ScheduleEvents>
             </ScheduleEventSettings>
             <ScheduleViews>
                 <ScheduleView Option="@View"></ScheduleView>
             </ScheduleViews>
             <ScheduleQuickInfoTemplates>
                 <ContentTemplate>
                     @if (((EventModel) context).Id == Guid.Empty )
                     {
                         <EventInput Value="(EventModel) context" QuickInfo="true"></EventInput>               
                     }
                     else
                     {
                         EventModel data = (EventModel) context;
                         <EventWidget Model="@data" ShowTitle="false"></EventWidget>
                                           
                     }
                 </ContentTemplate>
             </ScheduleQuickInfoTemplates>
             <ScheduleTemplates>
                 <EditorTemplate>
                     <EventInput Value="(EventModel) context"></EventInput>
                 </EditorTemplate>
             </ScheduleTemplates>
         </SfSchedule>
     </div>
     
    }else
    {
        <Loading></Loading>
}


@code{
    
    [Parameter]
    public bool ReadOnly { get; set; } = true;
    
    [Parameter]
    public List<CalendarModel> ResourceDatasource { get; set; } = new List<CalendarModel>();
    
    [Parameter]
    public string WidgdetHeight { get; set; } = "100%";
    [Parameter]
    public string WidgdetWidth { get; set; } = "100%";

    [Parameter]
    public View View { get; set; } = View.Month;

    private bool _loaded;

    private List<EventModel> _arrangementData = new List<EventModel>();
    
    SfSchedule<EventModel> ScheduleObj { get; set; }

    private DateTime CurrentDate { get; set; } = DateTime.Today;
    
    private UserGlobalModel User => UserService.GetUserGlobalModel();
    
    private void Callback(DateTime obj)
    {
        _arrangementData = EventsMongoService.Get(obj);
        StateHasChanged();
    }
    

    protected override void OnInitialized()
    {
        if (!ReadOnly)
        {
            ReadOnly = !User.Verified;
        }
        _loaded = true;
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _arrangementData = EventsMongoService.Get(CurrentDate);
            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }


    public void OnCellClick(CellClickEventArgs args)
    {
        args.Cancel = true;
    }
    
    public void OnActionBegin(ActionEventArgs<EventModel> args)
    {
        if (args.ActionType == ActionType.EventCreate && args.AddedRecords.Count > 0)
        {
            foreach(EventModel data in args.AddedRecords)
            {
                data.Id = EventsMongoService.Upsert(data).Id;
            }
        }
    }
    

    
    private void OnActionCompleted(ActionEventArgs<EventModel> args)
    {
        if (args.ActionType == ActionType.DateNavigate || args.ActionType == ActionType.EventCreate || args.ActionType == ActionType.EventChange || args.ActionType == ActionType.EventRemove)
        {
            if (args.AddedRecords is {Count: > 0 })
            {
                foreach (EventModel eventData in args.AddedRecords)
                {
                    eventData.CreateBy = User.DiscordId;
                    EventsMongoService.Upsert(eventData);
                }
            }
            if (args.ChangedRecords is {Count: > 0 })
            {
                foreach (EventModel eventData in args.ChangedRecords)
                {
                    if (!eventData.IsReadonly)
                    {
                        EventsMongoService.Upsert(eventData);
                    }
                }
            }
            if (args.DeletedRecords is {Count: > 0 })
            {
                foreach (EventModel eventData in args.DeletedRecords)
                {if (!eventData.IsReadonly)
                {
                    EventsMongoService.Remove(eventData);
                }
                }
            }
            
        }
    }


    

}
