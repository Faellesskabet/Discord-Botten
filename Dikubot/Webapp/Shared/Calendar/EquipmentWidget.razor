@using Dikubot.Webapp.Authentication
@using global::Discord.WebSocket

@using Dikubot.DataLayer.Database.Global.User
@using Dikubot.DataLayer.Database.Guild.Models.Calendar
@using Dikubot.DataLayer.Database.Guild.Models.Equipment

@using Dikubot.DataLayer.Database.Models

@using Dikubot.Discord
@using Dikubot.Extensions.Models.Equipment

@using Syncfusion.Blazor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CalendarMongoService CalendarMongoService
@inject IGuildMongoFactory GuildMongoFactory
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Data


@using UserIdentity = Dikubot.Webapp.Authentication.UserIdentity
@using Dikubot.DataLayer.Database.Global.Calendar
@using Dikubot.DataLayer.Database.Guild

  @if (true)
    {
<div class="control-section">
    <SfSchedule @ref="ScheduleObj" ID="schedule" TValue="EquipmentModel" Width="100%" Height="650px" @bind-SelectedDate="@CurrentDate">
        <ScheduleTemplates>
            <ResourceHeaderTemplate>
                <div class='template-wrap'>
                    <div class="Calendar-name"><b>@(((context as TemplateContext).ResourceData as CalendarModel).Name)</b></div>
                    <div class="Calendar-designation">@(((context as TemplateContext).ResourceData as CalendarModel).Decs)</div>
                </div>
            </ResourceHeaderTemplate>
        </ScheduleTemplates>
        <ScheduleGroup EnableCompactView="false" Resources="@_groupData"></ScheduleGroup>
        <ScheduleResources>
            <ScheduleResource TItem="CalendarModel" TValue="Guid" DataSource="@ResourceDatasource" Field="EquiqmentId" Title="Resources" Name="Resources" TextField="Name" IdField="Id" ColorField="Color" AllowMultiple="false"></ScheduleResource>
        </ScheduleResources>
        
        <ScheduleEventSettings TValue="EquipmentModel" DataSource="@EquipmentData">

            </ScheduleEventSettings>
            <ScheduleEvents TValue="EquipmentModel" ActionCompleted="OnActionCompleted"></ScheduleEvents>
        <ScheduleViews>
            <ScheduleView MaxEventsPerRow="1" Option="View.TimelineMonth" AllowVirtualScrolling="true"></ScheduleView>
        </ScheduleViews>
    </SfSchedule>
</div>
    }else
    {
        <Loading></Loading>
}

@code{
    [Parameter]
    public ulong GuildId { get; set; }

    [Inject] 
    protected IJSRuntime JsRuntime { get; set; }
    
    SfSchedule<EquipmentModel> ScheduleObj { get; set; }

    bool _editUpcoming = true;
    
    private int _currentYear;
    public List<CalendarModel> ResourceDatasource = new List<CalendarModel>();
    public List<EquipmentModel> EquipmentData = new List<EquipmentModel>();
    private string[] _groupData = { "Resources" };
    private DateTime CurrentDate { get; set; } = DateTime.Today;
    
    private Authenticator _authenticator;
    private UserIdentity _user;
    private SocketGuild _guild;
    private UserGlobalModel _userGlobalModel;
    
    private EquipmentMongoService _equipmentMongoService;
    
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        _authenticator = ((Authenticator) AuthenticationStateProvider);
        var authState = await _authenticator.GetAuthenticationStateAsync();
        _user = (UserIdentity) authState.User.Identity;
        if (_user == null)
        {
            return;
        }
        _guild = DiscordBot.ClientStatic.GetGuild(GuildId);
        _equipmentMongoService = GuildMongoFactory.Get<EquipmentMongoService>(_guild);
        
        ResourceDatasource = GetCalendarModels();
        EquipmentData = GetEvents(CurrentDate);
        
    }
    
    
    public void OnCellClick(CellClickEventArgs args)
    {
        args.Cancel = true;
    }
    public void OnActionBegin(ActionEventArgs<EquipmentModel> args)
    {
        if (args.ActionType == ActionType.EventCreate && args.AddedRecords.Count > 0)
        {
            foreach(EquipmentModel data in args.AddedRecords)
            {
                data.Id = _equipmentMongoService.Upsert(data).Id;
            }
        }
    }

    private List<CalendarModel> GetCalendarModels()
    {
        return CalendarMongoService.GetAll(model => model.CalendarType == CalendarModel.EnumCalendarType.Equipment);
    }
    
    private List<EquipmentModel> GetEvents(DateTime currentDate)
    {
        return GetEvents(new DateTime(currentDate.Year,currentDate.Month, 1), 
            new DateTime(currentDate.Year,currentDate.Month, 
                DateTime.DaysInMonth(currentDate.Year,currentDate.Month),
                23,59,59));
    }

    private List<EquipmentModel> GetEvents(DateTime startTime, DateTime endTime)
    {

        List<EquipmentModel> result =
            _equipmentMongoService.GetAll(model => model.StartTime.CompareTo(startTime) >= 0 ||
                                                   model.StartTime.CompareTo(endTime) <= 0
                                                   ||
                                                   (model.EndTime.CompareTo(startTime) >= 0
                                                    && model.EndTime.CompareTo(endTime) <= 0)
                );
        return result;
    }
    
    
    private void OnActionCompleted(ActionEventArgs<EquipmentModel> args)
    {
        if (args.ActionType == ActionType.DateNavigate || args.ActionType == ActionType.EventCreate || args.ActionType == ActionType.EventChange || args.ActionType == ActionType.EventRemove)
        {
            if (args.AddedRecords != null && args.AddedRecords.Count > 0)
            {
                foreach (EquipmentModel eventData in args.AddedRecords)
                {
                    eventData.CreateBy = _user.DiscordId;
                    _equipmentMongoService.Upsert(eventData);
                }
            }
            if (args.ChangedRecords != null && args.ChangedRecords.Count > 0)
            {
                foreach (EquipmentModel eventData in args.ChangedRecords)
                {
                    if (!eventData.IsReadonly)
                    {
                        _equipmentMongoService.Upsert(eventData);
                    }
                }
            }
            if (args.DeletedRecords != null && args.DeletedRecords.Count > 0)
            {
                foreach (EquipmentModel eventData in args.DeletedRecords)
                {if (!eventData.IsReadonly)
                {
                    _equipmentMongoService.Remove(eventData);
                }
                }
            }
            this.EquipmentData = GetEvents(CurrentDate);
        }
    }
    
     
    
    
}
