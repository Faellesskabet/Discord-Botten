@inherits LayoutComponentBase
@using Dikubot.Webapp.Authentication
@using Dikubot.Webapp.Authentication
@using Dikubot.Discord
@using global::Discord.WebSocket
@using Dikubot.DataLayer.Database.Global.GuildSettings
@using MudBlazor.Utilities
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DiscordBot DiscordBot;

<MudLayout>
    <MudAppBar Elevation="1" Color="Color.Primary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        @if (_loaded)
        {
            <MudText Typo="Typo.h5">@_guildSettingsModel.Name fællesskabet</MudText>
        }
        <MudSpacer />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/Faellesskabet/Discord-Botten" Target="_blank" />
    </MudAppBar>
    <MudDrawer @bind-Open="@open" Elevation="1" Style="@($"background-color: {NavColor}; color: {NavTextColor};")">
        <MudDrawerHeader>
            @if (_loaded)
            {
                <MudAvatar Image="@_guildSettingsModel.LogoUrl" Size="Size.Large"></MudAvatar>
            }
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Filled.Home" Href="/">Forside</MudNavLink>
            <AuthorizeView Roles="@Permissions.GlobalAdmin">
                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Filled.CrueltyFree" IconColor="Color.Primary" Href="/op">System Admin indstillinger</MudNavLink>
            </AuthorizeView>
            <AuthorizeView Roles="@Permissions.GuildAdmin">
                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Filled.Computer" Href="/admin">Admin indstillinger</MudNavLink>
            </AuthorizeView>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Filled.Newspaper" Href="/news">Nyheder</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Filled.Person" Href="/profile">Min Profil</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Filled.People" Href="/changeguild">Skift Fællesskab</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Filled.DomainAdd" Href="/addguild">Tilføj dit eget fællesskab</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Filled.SportsKabaddi" Href="/volunteer">Bliv frivillig</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Filled.Help" Href="/help">Få hjælp</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Filled.Logout" Href="/logout">Log-ud</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class="pt-16 px-16">
        <MudContainer Class="mt-6" Style="min-height: 100vh">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code{
    bool open = true;
    private Authenticator authenticator;
    private UserIdentity user;
    private SocketGuild guild;
    private GuildSettingsModel _guildSettingsModel;
    private bool _loaded = false;
    private string NavColor = "";
    private string NavTextColor = "";

    protected override async Task OnInitializedAsync()
    {
        NavColor = GetColor().Value;
        NavTextColor = GetTextColor().Value;
        
        authenticator = ((Authenticator) AuthenticationStateProvider);
        var authState = await authenticator.GetAuthenticationStateAsync();
        user = (UserIdentity) authState.User.Identity;
        if (user == null)
        {
            return;
        }
        guild = DiscordBot.Client.GetGuild(user.UserGlobalModel.SelectedGuild);
        _guildSettingsModel = new GuildSettingsService().Get(model => model.GuildId == user.UserGlobalModel.SelectedGuild) ?? new GuildSettingsModel(guild);
        _loaded = true;
    }

    void ToggleDrawer()
    {
        open = !open;
    }

    private MudColor GetColor()
    {
        return App.ThemeProvider.IsDarkMode ? App.ThemeProvider.Theme.PaletteDark.Background : App.ThemeProvider.Theme.Palette.Background;
    }

    private MudColor GetTextColor()
    {
        return App.ThemeProvider.IsDarkMode ? App.ThemeProvider.Theme.PaletteDark.TextPrimary : App.ThemeProvider.Theme.Palette.TextPrimary;
    }
    
}

