@using Dikubot.DataLayer.Database.Global.GuildSettings
@using Dikubot.Discord
@using Dikubot.Extensions.EmojiSelector
@using Dikubot.Webapp.Authentication
@using Dikubot.Webapp.Authentication.Identities
@using global::Discord.WebSocket
@using Dikubot.Webapp.Extensions.NavMenu
@using Dikubot.DataLayer.Database.Global.User.DiscordUser
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager;
@inject UserService User
@inject NotifyStateService NotifyStateService
@inject GuildSettingsMongoService GuildSettingsMongoService
@inject DiscordUserGlobalMongoService DiscordUserGlobalMongoService
@inject LocalizationService LocalizationService


<MudLayout>

    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
        @if (_loaded)
        {
            <MudText Typo="Typo.h5">
                <Localization>
                    <Danish>
                        @Guild.Name fællesskabet
                    </Danish>
                    <English>
                        @Guild.Name community
                    </English>
                </Localization>

            </MudText>
        }
        <MudSpacer/>

        <Localization>
            <Danish>
                <MudIconButton Size="Size.Large" Icon="@Twemoji.E1f1e9_1f1f0" OnClick="() => LocalizationService.Change(LocalizationService.Language.English)"/>
            </Danish>
            <English>
                <MudIconButton Size="Size.Large" Icon="@Twemoji.E1f1ec_1f1e7" OnClick="() => LocalizationService.Change(LocalizationService.Language.Danish)"/>
            </English>
        </Localization>
        <MudIconButton Size="Size.Medium" Icon="@DarkModeIcon" OnClick="() => App.ToggleDarkMode()"/>


        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/Faellesskabet/Discord-Botten" Target="_blank"/>
    </MudAppBar>
    <MudDrawer @bind-Open="@open" Elevation="1">

        <MudDrawerHeader>
            @if (_loaded)
            {
                <MudAvatar Image="@Guild.LogoUrl" Size="Size.Large"></MudAvatar>
            }

        </MudDrawerHeader>
        <MudNavMenu>
            <MudSelect
                T="ulong"
                Label="Fællesskab"
                Value="@_guildId"
                Variant="Variant.Outlined"
                ValueChanged="ChangeGuild"
                AdornmentIcon="@Icons.Filled.People"
                AdornmentColor="Color.Primary"
                Text="@(_guilds.FirstOrDefault(model => model.GuildId == User?.GetUserGlobalModel().SelectedGuild)?.Name ?? "Vælg fællesskab")">
                @foreach (GuildSettingsModel guild in _guilds)
                {
                    <MudSelectItem Value="@guild.GuildId">@guild.Name</MudSelectItem>
                }
            </MudSelect>

            <SideNavMenu/>

        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class="pt-16">
        <MudBreadcrumbs Items="_breadcrumbItems" MaxItems="6" Style="height: 0px;">
            <ItemTemplate Context="item">
                <MudLink Href="@item.Href" Color="Color.Primary">@item.Text</MudLink>
            </ItemTemplate>

        </MudBreadcrumbs>
        <MudContainer Class="mt-6" Style="@_style">
            @Body
        </MudContainer>
    </MudMainContent>
    <Footer style="margin-top: 16px; min-height: 30vh;"></Footer>
</MudLayout>

@code{

    private string _background => (string)(App.IsDarkMode ? "transparent" : App.Theme.Palette.Background.Value);
    private string _style => $"min-height: 70vh; background-color: {_background}; padding-top: 24px; padding-bottom: 24px;";

    private string DarkModeIcon => App.IsDarkMode ? Icons.Filled.WbSunny : Icons.Filled.DarkMode;

    bool open = true;
    private Authenticator authenticator;
    private DiscordIdentity _discord;
    private SocketGuild guild;

    private bool _loaded;
    private string NavColor = "";
    private string NavTextColor = "";
    private List<GuildSettingsModel> _guilds;
    private ulong _guildId;

    private List<BreadcrumbItem> _breadcrumbItems = new();

    protected override void OnParametersSet()
    {
        string[] thisUri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri).Split("/");

        string href = "";
        _breadcrumbItems = new List<BreadcrumbItem>
        {
            new("Home", "")
        };
        foreach (string uri in thisUri)
        {
            href += "/" + uri;
            _breadcrumbItems.Add(new BreadcrumbItem(string.IsNullOrWhiteSpace(uri) ? "" : string.Concat(uri[0].ToString().ToUpper(), uri.AsSpan(1)), href, thisUri.Last().Equals(uri)));
        }
        base.OnParametersSet();
    }


    protected override async Task OnInitializedAsync()
    {
        await SetData();
        _loaded = true;
        NotifyStateService.UserChange += UserChange;

        _guilds = new List<GuildSettingsModel>();
        _guildId = User.GetUserGlobalModel().SelectedGuild;

        foreach (SocketGuild guild in User.GetGuilds())
        {
            _guilds.Add(GuildSettingsMongoService.Get(guild));
        }

        GuildSettingsModel ShowMore = new GuildSettingsModel { Name = "Show More", Id = Guid.Empty };
        _guilds.Add(ShowMore);
        base.OnInitialized();

        StateHasChanged();
    }

    private async Task SetData()
    {
        authenticator = (Authenticator)AuthenticationStateProvider;
        AuthenticationState authState = await authenticator.GetAuthenticationStateAsync();
        _discord = (DiscordIdentity)authState.User.Identity;
        if (_discord == null)
        {
            return;
        }
        guild = DiscordBot.ClientStatic.GetGuild(_discord.DiscordUserGlobalModel.SelectedGuild);
        Guild = GuildSettingsMongoService.Get(model => model.GuildId == _discord.DiscordUserGlobalModel.SelectedGuild) ?? new GuildSettingsModel(guild);
    }

    private void UserChange(object? sender, EventArgs e)
    {
        SetData();
        StateHasChanged();
    }

    [CascadingParameter]
    protected App App { get; set; }

    [CascadingParameter]
    protected GuildSettingsModel Guild { get; set; }


    public async Task ChangeGuild(ulong guildId)
    {
        _guildId = guildId;

        if (_guildId == User.GetUserGlobalModel().SelectedGuild)
        {
            return;
        }
        DiscordUserGlobalModel discordUserGlobalModel = User.GetUserGlobalModel();
        discordUserGlobalModel.SelectedGuild = _guildId;
        DiscordUserGlobalMongoService.Upsert(discordUserGlobalModel);

        App.UserHasChange();

        StateHasChanged();
    }


    void ToggleDrawer()
    {
        open = !open;
    }



}