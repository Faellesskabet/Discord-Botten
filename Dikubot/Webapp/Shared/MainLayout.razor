@inherits LayoutComponentBase
@using Dikubot.Webapp.Authentication
@using Dikubot.Webapp.Authentication
@using Dikubot.Discord
@using global::Discord.WebSocket
@using Dikubot.DataLayer.Database.Global.GuildSettings
@using Dikubot.Extensions.EmojiSelector
@using MudBlazor.Utilities
@using Dikubot.Webapp.Extensions.NavMenu
@using MudBlazor.ThemeManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager _navigationManager;
@inject UserService _user
@inject NotifyStateService _notifyStateService




<MudLayout>
        
    <MudAppBar Elevation="@ThemeManager.AppBarElevation">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
        @if (_loaded)
        {
            <MudText Typo="Typo.h5">
                <Localization>
                    <Danish>
                        @_guildSettingsModel.Name fællesskabet
                    </Danish>
                    <English>
                        @_guildSettingsModel.Name community
                    </English>
                </Localization>

            </MudText>
        }
        <MudSpacer/>

        <Localization>
            <Danish>
                <MudIconButton Size="Size.Large" Icon="@Twemoji.E1f1e9_1f1f0" OnClick="() => new ChangeLocalization(_user, _notifyStateService).Change(ChangeLocalization.Language.English)"/>
            </Danish>
            <English>
                <MudIconButton Size="Size.Large" Icon="@Twemoji.E1f1ec_1f1e7" OnClick="() => new ChangeLocalization(_user, _notifyStateService).Change(ChangeLocalization.Language.Danish)"/>
            </English>
        </Localization>
        @if (_user.GetUserGlobalModel().IsAdmin)
        {
            <MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />
            <MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="ThemeManager" ThemeChanged="UpdateTheme" />
        }
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/Faellesskabet/Discord-Botten" Target="_blank"/>
    </MudAppBar>
    <MudDrawer @bind-Open="@open" Elevation="1" ClipMode="ThemeManager.DrawerClipMode">
               
        <MudDrawerHeader>
            @if (_loaded)
            {
                <MudAvatar Image="@_guildSettingsModel.LogoUrl" Size="Size.Large"></MudAvatar>
            }
        </MudDrawerHeader>
        <MudNavMenu>
            <SideNavMenu User="@user"> </SideNavMenu>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class="pt-16">
        <MudBreadcrumbs Items="_breadcrumbItems" MaxItems="6" Style="height: 0px;">
            <ItemTemplate Context="item">
                <MudLink Href="@item.Href" Color="Color.Primary">@item.Text</MudLink>
            </ItemTemplate>

        </MudBreadcrumbs>
        <MudContainer Class="mt-6" Style="min-height: 100vh">
            @Body
        </MudContainer>
    </MudMainContent>
    <Footer style="margin-top: 15px;"></Footer>
</MudLayout>

@code{
    bool open = true;
    private Authenticator authenticator;
    private UserIdentity user;
    private SocketGuild guild;
    private GuildSettingsModel _guildSettingsModel;
    private bool _loaded = false;
    private string NavColor = "";
    private string NavTextColor = "";
    
    private List<BreadcrumbItem> _breadcrumbItems = new List<BreadcrumbItem>();

    protected override void OnParametersSet()
    {
        var thisUri = _navigationManager.ToBaseRelativePath(_navigationManager.Uri).Split("/");

        string href = "";
        _breadcrumbItems = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "")
        };
        foreach (string uri in thisUri)
        {   
            href += "/" + uri;
            _breadcrumbItems.Add(new BreadcrumbItem(string.IsNullOrWhiteSpace(uri) ? "" : string.Concat(uri[0].ToString().ToUpper(), uri.AsSpan(1)),href,thisUri.Last().Equals(uri)));
        }
        base.OnParametersSet();
    }
    

    protected override async Task OnInitializedAsync()
    {
        await SetData();
        _loaded = true;
        _notifyStateService.UserChange += UserChange;
        StateHasChanged();
    }

    private async Task SetData()
    {
        authenticator = ((Authenticator) AuthenticationStateProvider);
        var authState = await authenticator.GetAuthenticationStateAsync();
        user = (UserIdentity) authState.User.Identity;
        if (user == null)
        {
            return;
        }
        guild = DiscordBot.ClientStatic.GetGuild(user.UserGlobalModel.SelectedGuild);
        _guildSettingsModel = new GuildSettingsService().Get(model => model.GuildId == user.UserGlobalModel.SelectedGuild) ?? new GuildSettingsModel(guild);
    }
    
    private void UserChange(object? sender, EventArgs e)
    {
        SetData();
        StateHasChanged();
    }

    #region ThemManger
    
    [CascadingParameter] 
    protected App App { get; set; }
    
    [CascadingParameter]
    protected ThemeManagerTheme? ThemeManager { get; set; }
    
    [Parameter] 
    public Action<ThemeManagerTheme> OnThemeManagerChange { get; set; }
    
    
    
    private bool _themeManagerOpen = false;
    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

     void UpdateTheme(ThemeManagerTheme value)
     {
         this.App.ChangeTheme(value);
         //OnThemeManagerChange?.Invoke(value);
         StateHasChanged();
         
    }
    
    #endregion
    
    
    
    
    void ToggleDrawer()
    {
        open = !open;
    }

   
    
}

