@using Dikubot.DataLayer.Static
@using Dikubot.DataLayer.Database.Global.Settings.Tags
@using Dikubot.DataLayer.Database.Guild.Models.Calendar
@using Dikubot.Webapp.Extensions.Calendar.Model
@using global::Discord.WebSocket

@namespace Dikubot.Extensions.Calender

@inject UserService _userService;


<MudSelect MultiSelection="true"
           Label="Calenderer"
           HelperText="Hvilke kalendere begivenheden er inde under"
           @bind-SelectedValues="Value"
           MultiSelectionTextFunc="list => GetTagsString()" Text="@GetTagsString()"
           OnClose="OnValueChanged">
    @foreach (var listmodel in ListModel)
    {
        @foreach (var tag in listmodel.Item2)
        {
            <MudSelectItem Value="tag.Id">@tag.Name - @tag.Decs</MudSelectItem>
        }
    }
    @foreach (var id in NotInList)
            {
                @if (_calendarLogic.Get(id).Id != Guid.Empty)
                {
                    CalendarModel tag = _calendarLogic.Get(id);;
                    <MudSelectItem Value="tag.Id">@tag.Name</MudSelectItem>
                }
                else
                {
                    <MudSelectItem Value="id"> Delete me </MudSelectItem>
                }
            }
    
</MudSelect>

@code {
    [Parameter]
    public  IEnumerable<Guid> Value { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<Guid>> ValueChanged { get; set; }
    
    [Parameter]
    public CalendarModel.EnumCalendarType TagType { get; set; } = CalendarModel.EnumCalendarType.Event;

    private CalendarLogic _calendarLogic;
    
    private List<(SocketGuild,List<CalendarModel>)> ListModel => _calendarLogic.GetAllPermisionsCalendars(TagType).Result;
    private List<Guid> NotInList;
    
    protected override void OnInitialized()
    {
        _calendarLogic = new CalendarLogic(_userService.GetUserGlobalModel());
        var test = ListModel.SelectMany(m => m.Item2).Select(m => m.Id);
        NotInList = Value.Where(v => !test.Contains(v)).ToList();
        base.OnInitialized();
    }

    private async Task OnValueChanged()
    {
        await ValueChanged.InvokeAsync(Value);

    }
    
    
    private string GetTagsString()
    {
        return Util.ConcatListToString(Value.Select(tag => _calendarLogic.Get(tag).Name ?? "").ToList());
    }
}