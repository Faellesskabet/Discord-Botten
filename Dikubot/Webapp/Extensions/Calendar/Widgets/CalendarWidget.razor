

@using Dikubot.DataLayer.Database.Global.User
@using Dikubot.DataLayer.Database.Guild.Models.Calendar
@using Dikubot.DataLayer.Database.Guild.Models.Calendar.Events
@using Dikubot.DataLayer.Database.Models
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Data

@inject UserService _userService;

@namespace Dikubot.Extensions.Calender
<style>
    .e-quick-popup-wrapper{
    z-index: 1301 !important;
    }
    .mud-popover{
    z-index: 10001 !important;
    }
</style>

 @if (_loaded)   {
<div class="control-section">
    <SfSchedule @ref="ScheduleObj" 
                ID="schedule" 
                TValue="EventModel"
                Width="100%" 
                Height="650px" 
                @bind-SelectedDate="@CurrentDate"
                Readonly="ReadOnly"
                ShowWeekNumber="true"
                FirstDayOfWeek="1">
        <ScheduleEventSettings TValue="EventModel" DataSource="@ArrangementData">
            <ScheduleEvents TValue="EventModel" ActionCompleted="OnActionCompleted" ></ScheduleEvents>
        </ScheduleEventSettings>
        <ScheduleViews>
            <ScheduleView Option="View.Month"></ScheduleView>
        </ScheduleViews>
        <ScheduleQuickInfoTemplates>
            <ContentTemplate>
                @if (((EventModel) context).Id == Guid.Empty )
                {
                    <EventInput Value="(EventModel) context" QuickInfo="true"></EventInput>               
                }
                else
                {
                    EventModel data = (EventModel) context;
                    <EventWidget Model="@data" ShowTitle="false"></EventWidget>
                                           
                }
            </ContentTemplate>
        </ScheduleQuickInfoTemplates>
        <ScheduleTemplates>
            <EditorTemplate>
                <EventInput Value="(EventModel) context"></EventInput>
            </EditorTemplate>
        </ScheduleTemplates>
    </SfSchedule>
</div>
    }else
    {
        <Loading></Loading>
}


@code{
    [Parameter]
    public static ulong? GuildId { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; } = true;
    
    [Parameter]
    public List<CalendarModel> ResourceDatasource { get; set; } = new List<CalendarModel>();
    
    private bool _loaded;

    private List<EventModel> ArrangementData => _eventsServices.Get(CurrentDate);
    
    SfSchedule<EventModel> ScheduleObj { get; set; }
    
   
    private DateTime CurrentDate { get; set; } = DateTime.Today;
    
    private UserGlobalModel User => _userService.GetUserGlobalModel();
    
    private EventsServices _eventsServices;
    
    
    protected override async Task OnInitializedAsync()
    {
        _eventsServices = new EventsServices(_userService,GuildId?.ToString());
        if (!ReadOnly)
        {
            ReadOnly = !User.Verified;
        }
        _loaded = true;
        await base.OnInitializedAsync();
        
    }
    
    
    public void OnCellClick(CellClickEventArgs args)
    {
        args.Cancel = true;
    }
    
    public void OnActionBegin(ActionEventArgs<EventModel> args)
    {
        if (args.ActionType == ActionType.EventCreate && args.AddedRecords.Count > 0)
        {
            foreach(EventModel data in args.AddedRecords)
            {
                data.Id = _eventsServices.Upsert(data).Id;
            }
        }
    }
    

    
    private void OnActionCompleted(ActionEventArgs<EventModel> args)
    {
        if (args.ActionType == ActionType.DateNavigate || args.ActionType == ActionType.EventCreate || args.ActionType == ActionType.EventChange || args.ActionType == ActionType.EventRemove)
        {
            if (args.AddedRecords is {Count: > 0 })
            {
                foreach (EventModel eventData in args.AddedRecords)
                {
                    eventData.CreateBy = User.DiscordId;
                    _eventsServices.Upsert(eventData);
                }
            }
            if (args.ChangedRecords is {Count: > 0 })
            {
                foreach (EventModel eventData in args.ChangedRecords)
                {
                    if (!eventData.IsReadonly)
                    {
                        _eventsServices.Upsert(eventData);
                    }
                }
            }
            if (args.DeletedRecords is {Count: > 0 })
            {
                foreach (EventModel eventData in args.DeletedRecords)
                {if (!eventData.IsReadonly)
                {
                    _eventsServices.Remove(eventData);
                }
                }
            }
            
        }
    }
    
     
    
    
}
