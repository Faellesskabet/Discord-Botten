@using Dikubot.DataLayer.Database.Guild.Models.Calendar.Events
@using Dikubot.DataLayer.Database.Global.Settings.Tags
@using Dikubot.Webapp.Extensions.Discovery.Links
@using Dikubot.Webapp.Extensions.Discovery.Request
@inject UserService _user;
@inject NavigationManager _navigationManager;
@namespace Dikubot.Extensions.Calender

<MudCard>
    @if (ShowTitle)
    {<MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@Model.Subject</MudText>
        </CardHeaderContent>
         
         <CardHeaderActions>
         @if (_user.GetUserGlobalModel().IsAdmin)
         {<MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" OnClick="Edit" />
         }else if(_user.GetUserGlobalModel().Verified){
             <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" OnClick="Request"/>
         }
         </CardHeaderActions>
     </MudCardHeader>
    }
    <MudCardContent>
        <div style="height: 32px; overflow: hidden">
            <TagDisplay Tags="Model.Tags"/>
        </div>
        <MudField Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.AccessTime">
            @Model.Time()
        </MudField>
        <MudField AdornmentIcon="@Icons.Filled.Place" Adornment="Adornment.Start">
            @Model.Location
        </MudField>
        <MudField AdornmentIcon="@Icons.Filled.People" Adornment="Adornment.Start">
            @Model.Accepted.Count.ToString()
        </MudField>
    </MudCardContent>
    <MudField Label="Beskrivelse" Variant="Variant.Outlined">
        <MudCardContent Style="max-height: 150px; min-height: 150px; overflow: scroll; padding-top: 0; padding-bottom: 0">
       
            <MudText Typo="Typo.body2">
                @(Model.Description)
            </MudText>
        
        </MudCardContent>
    </MudField>
    @if (_user.IsRegistered())
    {
        <MudCardActions>
            <MudButton Color="JoinColor" Disabled="@_processing" OnClick="JoinEvent" Variant="Variant.Filled">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>@JoinText</MudText>
                }
            </MudButton>
            <MudSpacer/>
            <MudButton OnClick="ShowMore"> Show More </MudButton>
        </MudCardActions>
    }else
            {
                <MudCardActions>
                <MudSpacer/>
                <MudButton Color="Color.Default" Variant="Variant.Filled" Href="/connect"> login </MudButton>
                <MudSpacer/>
                </MudCardActions>
            }
    
    
</MudCard>


@code {
    [Parameter]
    public EventModel Model { get; set; }

    [Parameter]
    public bool ShowTitle { get; set; } = true;
        
    [Parameter]
    public ulong GuildId { get; set; }

    
    private bool HasJoined => Model.Accepted.Contains(_user.GetUserGlobalModel().DiscordId);
    private Color JoinColor => HasJoined ?  Color.Error : Color.Success ;
    private string JoinText => HasJoined ?  "Decline" : "Join" ;
    private bool _processing = false;

    private async void JoinEvent()
    {
        _processing = true;
        EventsServices eventsServices = new EventsServices();

        EventModel eventModel = eventsServices.Get(Model.Id);
        if (HasJoined)
        {
            eventModel.Declined.Add(_user.GetUserGlobalModel().DiscordId);
            eventModel.Accepted.Remove(_user.GetUserGlobalModel().DiscordId);
        }
        else
        {
            eventModel.Accepted.Add(_user.GetUserGlobalModel().DiscordId);
            eventModel.Declined.Remove(_user.GetUserGlobalModel().DiscordId);
        }

        Model = eventsServices.Upsert(eventModel);
        _processing = false;
    }

    private void ShowMore()
    {
        _navigationManager.NavigateTo($"/Discovery/Events/{Model.Id}");
    }

    private void Edit()
    {
        _navigationManager.NavigateTo($"/admin/Event/edit/{Model.Id}");
    }

    private void Request()
    {
        EventRequestService _requestService = new EventRequestService();
        RequestModel<EventModel> requestModel = new RequestModel<EventModel>();
        requestModel.RequestItem = Model;
        requestModel.Status = RequestModel<EventModel>.StatusEmun.change;
        requestModel = _requestService.Upsert(requestModel);
        _navigationManager.NavigateTo($"/Request/Event/edit/{requestModel.Id}");
    }
     
    
}