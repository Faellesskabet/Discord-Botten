@page "/discovery/events"
@inject UserService _userService;
@inject NavigationManager _navigationManager;
@using Dikubot.Extensions.Calender;
@using Dikubot.DataLayer.Database.Guild.Models.Calendar.Events
@using Dikubot.Extensions.search
@attribute [AllowAnonymous]

<Searchbar Items="_models" Context="item">
        <TemplateRow Context="item">
           <MudItem xs="12" sm="4"><EventWidget Model="item"></EventWidget></MudItem>
        </TemplateRow>
    </Searchbar>
    <MudButton Color="@Color.Primary" FullWidth="@true" OnClick="@Request" Style="margin-top: 15px;" Variant="Variant.Outlined">Tilføj dit event til KULiv.dk</MudButton>

@code
{
    public List<EventModel> _models { get; set; }
    private EventsServices _services = new EventsServices();
    
    protected override void OnInitialized()
    {
        _models = GetEvents(DateTime.Today);
        base.OnInitialized();
    }
    
    private List<EventModel> GetEvents(DateTime CurrentDate)
    {
        return GetEvents(new DateTime(CurrentDate.Year,CurrentDate.Month, 1), 
            new DateTime(CurrentDate.Year,CurrentDate.Month, 
                DateTime.DaysInMonth(CurrentDate.Year,CurrentDate.Month),
                23,59,59));
    }

    private List<EventModel> GetEvents(DateTime startTime, DateTime endTime)
    {
        
        List<EventModel> result = _services.GetAll(model => model.StartTime.CompareTo(startTime) >= 0 ||
                                                            model.StartTime.CompareTo(endTime) <= 0
                                                            || (model.EndTime.CompareTo(startTime) >= 0
                                                                && model.EndTime.CompareTo(endTime) <= 0)
            ).Select(m =>
            {
                m.IsReadonly = true;
                return m;
            })
            .ToList();
            
        
        return result;
    }
    
    private void Request()
    {
        _navigationManager.NavigateTo($"/Request/Event/create");
    }

}
