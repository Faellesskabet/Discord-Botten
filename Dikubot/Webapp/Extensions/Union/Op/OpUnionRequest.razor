@page "/op/union/request"

@using Dikubot.Webapp.Authentication
@attribute [Authorize(Roles = Permissions.GlobalAdmin)]
@using Syncfusion.Blazor.Buttons

@using Dikubot.Webapp.Authentication
@using System.Net.Http.Json
@using Dikubot.DataLayer.Database.Global.Settings.Tags
@using Dikubot.DataLayer.Database.Global.User
@using Dikubot.DataLayer.Database.Guild.Models.Calendar
@using Dikubot.Discord
@using Dikubot.Webapp.Extensions.Discovery.Links
@using Dikubot.Webapp.Extensions.Discovery.Request
@using Dikubot.Webapp.Shared.Dialog
@using global::Discord.WebSocket
@using Microsoft.AspNetCore.Razor.TagHelpers
@using Microsoft.IdentityModel.Tokens




<MudTable Hover="@true" striped="@true" ServerData="@(new Func<TableState, Task<TableData<RequestModel<UnionModel>>>>(Reload))" @ref="_table"
          Loading="@_loading">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Admin rolle kategorier</MudText>
        <MudSpacer/>
        <MudSelect T="RequestModel<UnionModel>.StatusEmun" Label="Status" MultiSelection="true" @bind-SelectedValues="options" OnClose="o => _table.ReloadServerData()">
            <MudSelectItem Value="RequestModel<UnionModel>.StatusEmun.ongoing"></MudSelectItem>
            <MudSelectItem Value="RequestModel<UnionModel>.StatusEmun.change"></MudSelectItem>
            <MudSelectItem Value="RequestModel<UnionModel>.StatusEmun.approved"></MudSelectItem>
            <MudSelectItem Value="RequestModel<UnionModel>.StatusEmun.denied"></MudSelectItem>
        </MudSelect>
        
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(OnSearch)" Placeholder="Søg" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Status</MudTh>
        <MudTh>Contact Name</MudTh>
        <MudTh>Union title</MudTh>
        <MudTh>Indstillinger</MudTh>
        <MudTh>Slet</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Status">@context.Status
            <MudIconButton Icon="@Icons.Filled.AddCircleOutline" OnClick="()=>Approve(context)" Color="Color.Success"></MudIconButton>
            <MudIconButton Icon="@Icons.Filled.NotInterested" OnClick="()=>Denied(context)" Color="Color.Error"></MudIconButton>
        </MudTd>
        <MudTd DataLabel="Navn">@context.Contact.Name</MudTd>
        <MudTd DataLabel="Beskrivelse">@context.RequestItem.Title</MudTd>
        <MudTd DataLabel="Indstillinger">
            <MudButton Color="Color.Primary" Variant="Variant.Text" Link=@($"/Request/Union/edit/{@context.Id.ToString()}")>Rediger</MudButton>
        </MudTd>
        <MudTd DataLabel="Slet">
            <MudButton Color="Color.Error" Variant="Variant.Text" OnClick="() => DeleteCategory(context)">Slet</MudButton>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Kunne ikke finde nogen elementer</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <Loading></Loading>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
<div class="d-flex flex-wrap mt-4">
    <MudButton Color="Color.Primary" Variant="Variant.Filled" Link="/Request/Union/create">Tilføj ny kategori</MudButton>
</div>


@code {

    
    
    [Inject] private IDialogService DialogService { get; set; }
    
    private MudTable<RequestModel<UnionModel>> _table;
    private string _searchQuery = "";
    private UnionRequestService _services;
    private bool _loading = true;
    
    
    private IEnumerable<RequestModel<UnionModel>.StatusEmun> options { get; set; } 
        = new HashSet<RequestModel<UnionModel>.StatusEmun>() {RequestModel<UnionModel>.StatusEmun.ongoing, RequestModel<UnionModel>.StatusEmun.change};

    
    protected override async Task OnInitializedAsync()
    {

        _services = new UnionRequestService();
        _loading = false;
    }

    private async Task<TableData<RequestModel<UnionModel>>> Reload(TableState state)
    {
        List<RequestModel<UnionModel>> items;
        if (!_searchQuery.IsNullOrEmpty())
        {
            items = _services.Get(model => model.GetSearchContent().Contains(_searchQuery) && options.Contains(model.Status),
                    state.PageSize, state.Page);   
        }
        else
        {
            items = _services.Get(model =>  options.Contains(model.Status), state.PageSize, state.Page);   
        }

        return new TableData<RequestModel<UnionModel>>() { Items = items, TotalItems = (int)_services.EstimatedCount()};
    }
    
    private void OnSearch(string text)
    {
        _searchQuery = text;
        _table.ReloadServerData();
    }

    private async void DeleteCategory(RequestModel<UnionModel> joinRoleCategoryMainModel)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Er du sikker på du vil slette denne kategori?");
        parameters.Add("ButtonText", "Slet");
        parameters.Add("Color", Color.Error);
        DialogResult result = await DialogService.Show<ConfirmDialog>("Slet", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }
        
        _services.Remove(joinRoleCategoryMainModel);
        await _table.ReloadServerData();
    }
    
    private async void Approve(RequestModel<UnionModel> model)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Er du sikker på du vil godkende Unionen");
        parameters.Add("ButtonText", "Approve");
        parameters.Add("Color", Color.Success);
        DialogResult result = await DialogService.Show<ConfirmDialog>("Slet", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }

        UnionServices unionServices = new UnionServices();
        model.RequestItem = unionServices.Upsert(model.RequestItem);
        model.Status = RequestModel<UnionModel>.StatusEmun.approved;
        
        _services.Upsert(model);

        await _table.ReloadServerData();
    }
    private async void Denied(RequestModel<UnionModel> model)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Er du sikker på du ikke vil godkende Unionen");
        parameters.Add("ButtonText", "Denied");
        parameters.Add("Color", Color.Error);
        DialogResult result = await DialogService.Show<ConfirmDialog>("Slet", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }
        
        model.Status = RequestModel<UnionModel>.StatusEmun.denied;
        _services.Upsert(model);

        await _table.ReloadServerData();
    }
    
}