@using Dikubot.DataLayer.Database.Global.Settings.Tags
@using System.Diagnostics.CodeAnalysis
@using Dikubot.DataLayer.Database
@using Microsoft.AspNetCore.Components
@namespace Dikubot.Extensions.search
@typeparam TMainModel


<MudGrid Justify="Justify.Center">
    @if (ShowSearchbar)
    {
        <MudItem lg="12" md="12" sm="12">
            <MudTextField @bind-Value="SearchQuery" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" Immediate="@true"/>
        </MudItem>
    }
    @if (ShowTags)
    {
        <MudChipSet @bind-SelectedChips="selected" MultiSelection="true" Filter="true">
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" OverrideStyles="false" Style="height: 55px">
                @foreach (var cat in _Categories)
                {
                    @if (!ShowCategories.Contains(cat.Id))
                    {
                        <div style="margin-top: auto;">
                            <MudTooltip Text="@cat.Decs">
                                <MudButton OnClick="() => ShowCategories.Add(cat.Id)"
                                           Style="height: 49px"
                                           Variant="Variant.Outlined"
                                           EndIcon="@Icons.TwoTone.ExpandMore">
                                    @cat.Name
                                </MudButton>
                            </MudTooltip>
                       
                        </div>
                    }
               
                    @if (ShowCategories.Contains(cat.Id))
                    {
                        <MudField Label="@cat.Name" Variant="Variant.Outlined" InnerPadding="false"
                                  AdornmentIcon="@Icons.Filled.Close"
                                  Adornment="Adornment.End"
                                  AdornmentColor="Color.Primary" 
                                  OnAdornmentClick="() =>ShowCategories.Remove(cat.Id) ">
                            @foreach (var tag in _Tags.Where(tag => tag.Category.Contains(cat.Id)))
                            {
                                //Kan ikke gøres direkte :(
                                string style = $"background-color: " + @tag.Color + ";" + "color: " + @tag.TextColor + ";";
                                <MudChip Value="tag.Id" Variant="Variant.Text" Style="@style"> @tag.Name</MudChip>
                            }
                        </MudField>
                    }
                }
            </MudButtonGroup>
        </MudChipSet>
    }
</MudGrid>
<MudItem xs="12">
<MudGrid Justify="Justify.Center" Style="margin-top: 12px; margin-bottom: 12px">
       @if (TemplatePagination is null)
       {
           <MudPagination Color="Color.Primary" Count="Count" @bind-Selected="@Selected" Class="mt-4"/>
       }
       else
       {
           @TemplatePagination <MudPagination Color="Color.Primary" Count="Count" @bind-Selected="@Selected" Class="mt-4" />
       }
</MudGrid>
</MudItem>
<MudGrid>
@foreach (var item in ItemList.Skip((Selected-1)*NumberOfItems).Take(NumberOfItems))
        {
           
            if (TemplateRow is not null)
            {
                @TemplateRow(item);
            }
            
        }
</MudGrid>
<MudGrid Justify="Justify.Center" Style="margin-bottom: 12px">
    @if (TemplatePagination is null)
    {
        <MudPagination Color="Color.Primary" Count="Count" @bind-Selected="@Selected" Class="mt-4" />
    }
    else
    {
        @TemplatePagination <MudPagination Color="Color.Primary" Count="Count" @bind-Selected="@Selected" Class="mt-4" />
    }
    
</MudGrid>

@code {

    [Parameter]
    public int Selected { get; set; } = 1;

    private int Count => ItemList.Count / NumberOfItems+1;
    
    [Parameter] public int NumberOfItems { get; set; } = 9;
    
    
    
    [Parameter]
    public string SearchQuery { get; set; }

    [Parameter]
    public bool ShowTags { get; set; } = true;

    [Parameter]
    public bool ShowSearchbar { get; set; } = true;
    
    [Parameter]
    public RenderFragment<TMainModel>? TemplateRow { get; set; }
    
    [Parameter]
    public RenderFragment? TemplatePagination { get; set; }
    
    
    
    private HashSet<TagsMainModel> _Tags { set; get; } = _tagServices.GetAll().Where(t => t.TagType == TagsMainModel.enumTagType.tag).ToHashSet();
    private List<TagsMainModel> _Categories { set; get;  } = _tagServices.GetAll().Where(t => t.TagType == TagsMainModel.enumTagType.category).ToList();
    private HashSet<Guid> ShowCategories { get; set; } = new HashSet<Guid>();
    
    
    [Parameter, AllowNull]
    public List<TMainModel> Items { get; set; }
    
    //SearchCriteria((item as MainModel).GetSearchContent(),(item as MainModel).GetTags())
    public List<TMainModel> ItemList => Items.Where(item =>
        SearchCriteria((item as MainModel).GetSearchContent(), (item as MainModel).GetTags())).ToList();
    
    
    private static TagServices _tagServices = new TagServices();
    
    MudChip[] selected = new MudChip[]{};

    public bool SearchCriteria(List<string> items = null,  HashSet<Guid> tags = null )
    {
        if (tags != null)
        {
            HashSet<Guid> hasSelected = selected.Select(_ => (_.Value is Guid ? (Guid) _.Value : default) ).ToHashSet();
            if (!(_Tags.Count == hasSelected.Count || hasSelected.Count ==0) && !hasSelected.IsSubsetOf(tags) )
            {
                return false;
            }
        }

        if (items != null)
        {
            return string.IsNullOrWhiteSpace(SearchQuery) 
                   || items.Exists(s => s?.Contains(SearchQuery, StringComparison.InvariantCultureIgnoreCase) ?? false);
        }

        return true;
    }
    
    
    
    
}